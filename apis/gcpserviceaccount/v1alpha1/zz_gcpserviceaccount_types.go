// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GcpServiceAccountInitParameters struct {

	// (String) ID of the module which uses GCP service account credentials
	// ID of the module which uses GCP service account credentials
	ModuleID *string `json:"moduleId,omitempty" tf:"module_id,omitempty"`

	// (String) ID of the stack which uses GCP service account credentials
	// ID of the stack which uses GCP service account credentials
	// +crossplane:generate:reference:type=github.com/aksel-allas-org/provider-spacelift/apis/stack/v1alpha1.Stack
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// Reference to a Stack in stack to populate stackId.
	// +kubebuilder:validation:Optional
	StackIDRef *v1.Reference `json:"stackIdRef,omitempty" tf:"-"`

	// Selector for a Stack in stack to populate stackId.
	// +kubebuilder:validation:Optional
	StackIDSelector *v1.Selector `json:"stackIdSelector,omitempty" tf:"-"`

	// (Set of String) List of scopes that will be requested when generating temporary GCP service account credentials
	// List of scopes that will be requested when generating temporary GCP service account credentials
	// +listType=set
	TokenScopes []*string `json:"tokenScopes,omitempty" tf:"token_scopes,omitempty"`
}

type GcpServiceAccountObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) ID of the module which uses GCP service account credentials
	// ID of the module which uses GCP service account credentials
	ModuleID *string `json:"moduleId,omitempty" tf:"module_id,omitempty"`

	// (String) Email address of the GCP service account dedicated for this stack
	// Email address of the GCP service account dedicated for this stack
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`

	// (String) ID of the stack which uses GCP service account credentials
	// ID of the stack which uses GCP service account credentials
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// (Set of String) List of scopes that will be requested when generating temporary GCP service account credentials
	// List of scopes that will be requested when generating temporary GCP service account credentials
	// +listType=set
	TokenScopes []*string `json:"tokenScopes,omitempty" tf:"token_scopes,omitempty"`
}

type GcpServiceAccountParameters struct {

	// (String) ID of the module which uses GCP service account credentials
	// ID of the module which uses GCP service account credentials
	// +kubebuilder:validation:Optional
	ModuleID *string `json:"moduleId,omitempty" tf:"module_id,omitempty"`

	// (String) ID of the stack which uses GCP service account credentials
	// ID of the stack which uses GCP service account credentials
	// +crossplane:generate:reference:type=github.com/aksel-allas-org/provider-spacelift/apis/stack/v1alpha1.Stack
	// +kubebuilder:validation:Optional
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// Reference to a Stack in stack to populate stackId.
	// +kubebuilder:validation:Optional
	StackIDRef *v1.Reference `json:"stackIdRef,omitempty" tf:"-"`

	// Selector for a Stack in stack to populate stackId.
	// +kubebuilder:validation:Optional
	StackIDSelector *v1.Selector `json:"stackIdSelector,omitempty" tf:"-"`

	// (Set of String) List of scopes that will be requested when generating temporary GCP service account credentials
	// List of scopes that will be requested when generating temporary GCP service account credentials
	// +kubebuilder:validation:Optional
	// +listType=set
	TokenScopes []*string `json:"tokenScopes,omitempty" tf:"token_scopes,omitempty"`
}

// GcpServiceAccountSpec defines the desired state of GcpServiceAccount
type GcpServiceAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GcpServiceAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GcpServiceAccountInitParameters `json:"initProvider,omitempty"`
}

// GcpServiceAccountStatus defines the observed state of GcpServiceAccount.
type GcpServiceAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GcpServiceAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GcpServiceAccount is the Schema for the GcpServiceAccounts API. spacelift_gcp_service_account represents a Google Cloud Platform service account that's linked to a particular Stack or Module. These accounts are created by Spacelift on per-stack basis, and can be added as members to as many organizations and projects as needed.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spacelift}
type GcpServiceAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenScopes) || (has(self.initProvider) && has(self.initProvider.tokenScopes))",message="spec.forProvider.tokenScopes is a required parameter"
	Spec   GcpServiceAccountSpec   `json:"spec"`
	Status GcpServiceAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GcpServiceAccountList contains a list of GcpServiceAccounts
type GcpServiceAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GcpServiceAccount `json:"items"`
}

// Repository type metadata.
var (
	GcpServiceAccount_Kind             = "GcpServiceAccount"
	GcpServiceAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GcpServiceAccount_Kind}.String()
	GcpServiceAccount_KindAPIVersion   = GcpServiceAccount_Kind + "." + CRDGroupVersion.String()
	GcpServiceAccount_GroupVersionKind = CRDGroupVersion.WithKind(GcpServiceAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&GcpServiceAccount{}, &GcpServiceAccountList{})
}
