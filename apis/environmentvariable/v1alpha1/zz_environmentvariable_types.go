// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentVariableInitParameters struct {

	// (String) ID of the context on which the environment variable is defined
	// ID of the context on which the environment variable is defined
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-upjet-spacelift/apis/context/v1alpha1.Context
	ContextID *string `json:"contextId,omitempty" tf:"context_id,omitempty"`

	// Reference to a Context in context to populate contextId.
	// +kubebuilder:validation:Optional
	ContextIDRef *v1.Reference `json:"contextIdRef,omitempty" tf:"-"`

	// Selector for a Context in context to populate contextId.
	// +kubebuilder:validation:Optional
	ContextIDSelector *v1.Selector `json:"contextIdSelector,omitempty" tf:"-"`

	// (String) Description of the environment variable
	// Description of the environment variable
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) ID of the module on which the environment variable is defined
	// ID of the module on which the environment variable is defined
	ModuleID *string `json:"moduleId,omitempty" tf:"module_id,omitempty"`

	// (String) Name of the environment variable
	// Name of the environment variable
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the stack on which the environment variable is defined
	// ID of the stack on which the environment variable is defined
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// (String, Sensitive) Value of the environment variable. Defaults to an empty string.
	// Value of the environment variable. Defaults to an empty string.
	ValueSecretRef *v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`

	// (Boolean) Indicates whether the value is secret or not. Defaults to true.
	// Indicates whether the value is secret or not. Defaults to `true`.
	WriteOnly *bool `json:"writeOnly,omitempty" tf:"write_only,omitempty"`
}

type EnvironmentVariableObservation struct {

	// 256 checksum of the value
	// SHA-256 checksum of the value
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// (String) ID of the context on which the environment variable is defined
	// ID of the context on which the environment variable is defined
	ContextID *string `json:"contextId,omitempty" tf:"context_id,omitempty"`

	// (String) Description of the environment variable
	// Description of the environment variable
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) ID of the module on which the environment variable is defined
	// ID of the module on which the environment variable is defined
	ModuleID *string `json:"moduleId,omitempty" tf:"module_id,omitempty"`

	// (String) Name of the environment variable
	// Name of the environment variable
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the stack on which the environment variable is defined
	// ID of the stack on which the environment variable is defined
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// (Boolean) Indicates whether the value is secret or not. Defaults to true.
	// Indicates whether the value is secret or not. Defaults to `true`.
	WriteOnly *bool `json:"writeOnly,omitempty" tf:"write_only,omitempty"`
}

type EnvironmentVariableParameters struct {

	// (String) ID of the context on which the environment variable is defined
	// ID of the context on which the environment variable is defined
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-upjet-spacelift/apis/context/v1alpha1.Context
	// +kubebuilder:validation:Optional
	ContextID *string `json:"contextId,omitempty" tf:"context_id,omitempty"`

	// Reference to a Context in context to populate contextId.
	// +kubebuilder:validation:Optional
	ContextIDRef *v1.Reference `json:"contextIdRef,omitempty" tf:"-"`

	// Selector for a Context in context to populate contextId.
	// +kubebuilder:validation:Optional
	ContextIDSelector *v1.Selector `json:"contextIdSelector,omitempty" tf:"-"`

	// (String) Description of the environment variable
	// Description of the environment variable
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) ID of the module on which the environment variable is defined
	// ID of the module on which the environment variable is defined
	// +kubebuilder:validation:Optional
	ModuleID *string `json:"moduleId,omitempty" tf:"module_id,omitempty"`

	// (String) Name of the environment variable
	// Name of the environment variable
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the stack on which the environment variable is defined
	// ID of the stack on which the environment variable is defined
	// +kubebuilder:validation:Optional
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// (String, Sensitive) Value of the environment variable. Defaults to an empty string.
	// Value of the environment variable. Defaults to an empty string.
	// +kubebuilder:validation:Optional
	ValueSecretRef *v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`

	// (Boolean) Indicates whether the value is secret or not. Defaults to true.
	// Indicates whether the value is secret or not. Defaults to `true`.
	// +kubebuilder:validation:Optional
	WriteOnly *bool `json:"writeOnly,omitempty" tf:"write_only,omitempty"`
}

// EnvironmentVariableSpec defines the desired state of EnvironmentVariable
type EnvironmentVariableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentVariableParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentVariableInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentVariableStatus defines the observed state of EnvironmentVariable.
type EnvironmentVariableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentVariableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentVariable is the Schema for the EnvironmentVariables API. spacelift_environment_variable defines an environment variable on the context (spacelift_context), stack (spacelift_stack) or a module (spacelift_module), thereby allowing to pass and share various secrets and configuration with Spacelift stacks.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spacelift}
type EnvironmentVariable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   EnvironmentVariableSpec   `json:"spec"`
	Status EnvironmentVariableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentVariableList contains a list of EnvironmentVariables
type EnvironmentVariableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentVariable `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentVariable_Kind             = "EnvironmentVariable"
	EnvironmentVariable_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentVariable_Kind}.String()
	EnvironmentVariable_KindAPIVersion   = EnvironmentVariable_Kind + "." + CRDGroupVersion.String()
	EnvironmentVariable_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentVariable_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentVariable{}, &EnvironmentVariableList{})
}
