//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleInitParameters) DeepCopyInto(out *AnsibleInitParameters) {
	*out = *in
	if in.Playbook != nil {
		in, out := &in.Playbook, &out.Playbook
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleInitParameters.
func (in *AnsibleInitParameters) DeepCopy() *AnsibleInitParameters {
	if in == nil {
		return nil
	}
	out := new(AnsibleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleObservation) DeepCopyInto(out *AnsibleObservation) {
	*out = *in
	if in.Playbook != nil {
		in, out := &in.Playbook, &out.Playbook
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleObservation.
func (in *AnsibleObservation) DeepCopy() *AnsibleObservation {
	if in == nil {
		return nil
	}
	out := new(AnsibleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleParameters) DeepCopyInto(out *AnsibleParameters) {
	*out = *in
	if in.Playbook != nil {
		in, out := &in.Playbook, &out.Playbook
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleParameters.
func (in *AnsibleParameters) DeepCopy() *AnsibleParameters {
	if in == nil {
		return nil
	}
	out := new(AnsibleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsInitParameters) DeepCopyInto(out *AzureDevopsInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsInitParameters.
func (in *AzureDevopsInitParameters) DeepCopy() *AzureDevopsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsObservation) DeepCopyInto(out *AzureDevopsObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsObservation.
func (in *AzureDevopsObservation) DeepCopy() *AzureDevopsObservation {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsParameters) DeepCopyInto(out *AzureDevopsParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsParameters.
func (in *AzureDevopsParameters) DeepCopy() *AzureDevopsParameters {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudInitParameters) DeepCopyInto(out *BitbucketCloudInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudInitParameters.
func (in *BitbucketCloudInitParameters) DeepCopy() *BitbucketCloudInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudObservation) DeepCopyInto(out *BitbucketCloudObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudObservation.
func (in *BitbucketCloudObservation) DeepCopy() *BitbucketCloudObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudParameters) DeepCopyInto(out *BitbucketCloudParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudParameters.
func (in *BitbucketCloudParameters) DeepCopy() *BitbucketCloudParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDatacenterInitParameters) DeepCopyInto(out *BitbucketDatacenterInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDatacenterInitParameters.
func (in *BitbucketDatacenterInitParameters) DeepCopy() *BitbucketDatacenterInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDatacenterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDatacenterObservation) DeepCopyInto(out *BitbucketDatacenterObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDatacenterObservation.
func (in *BitbucketDatacenterObservation) DeepCopy() *BitbucketDatacenterObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketDatacenterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDatacenterParameters) DeepCopyInto(out *BitbucketDatacenterParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDatacenterParameters.
func (in *BitbucketDatacenterParameters) DeepCopy() *BitbucketDatacenterParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDatacenterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudFormationInitParameters) DeepCopyInto(out *CloudFormationInitParameters) {
	*out = *in
	if in.EntryTemplateFile != nil {
		in, out := &in.EntryTemplateFile, &out.EntryTemplateFile
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.StackName != nil {
		in, out := &in.StackName, &out.StackName
		*out = new(string)
		**out = **in
	}
	if in.TemplateBucket != nil {
		in, out := &in.TemplateBucket, &out.TemplateBucket
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudFormationInitParameters.
func (in *CloudFormationInitParameters) DeepCopy() *CloudFormationInitParameters {
	if in == nil {
		return nil
	}
	out := new(CloudFormationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudFormationObservation) DeepCopyInto(out *CloudFormationObservation) {
	*out = *in
	if in.EntryTemplateFile != nil {
		in, out := &in.EntryTemplateFile, &out.EntryTemplateFile
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.StackName != nil {
		in, out := &in.StackName, &out.StackName
		*out = new(string)
		**out = **in
	}
	if in.TemplateBucket != nil {
		in, out := &in.TemplateBucket, &out.TemplateBucket
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudFormationObservation.
func (in *CloudFormationObservation) DeepCopy() *CloudFormationObservation {
	if in == nil {
		return nil
	}
	out := new(CloudFormationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudFormationParameters) DeepCopyInto(out *CloudFormationParameters) {
	*out = *in
	if in.EntryTemplateFile != nil {
		in, out := &in.EntryTemplateFile, &out.EntryTemplateFile
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.StackName != nil {
		in, out := &in.StackName, &out.StackName
		*out = new(string)
		**out = **in
	}
	if in.TemplateBucket != nil {
		in, out := &in.TemplateBucket, &out.TemplateBucket
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudFormationParameters.
func (in *CloudFormationParameters) DeepCopy() *CloudFormationParameters {
	if in == nil {
		return nil
	}
	out := new(CloudFormationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseInitParameters) DeepCopyInto(out *GithubEnterpriseInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseInitParameters.
func (in *GithubEnterpriseInitParameters) DeepCopy() *GithubEnterpriseInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseObservation) DeepCopyInto(out *GithubEnterpriseObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseObservation.
func (in *GithubEnterpriseObservation) DeepCopy() *GithubEnterpriseObservation {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseParameters) DeepCopyInto(out *GithubEnterpriseParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseParameters.
func (in *GithubEnterpriseParameters) DeepCopy() *GithubEnterpriseParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabInitParameters) DeepCopyInto(out *GitlabInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabInitParameters.
func (in *GitlabInitParameters) DeepCopy() *GitlabInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabObservation) DeepCopyInto(out *GitlabObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabObservation.
func (in *GitlabObservation) DeepCopy() *GitlabObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabParameters) DeepCopyInto(out *GitlabParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabParameters.
func (in *GitlabParameters) DeepCopy() *GitlabParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesInitParameters) DeepCopyInto(out *KubernetesInitParameters) {
	*out = *in
	if in.KubectlVersion != nil {
		in, out := &in.KubectlVersion, &out.KubectlVersion
		*out = new(string)
		**out = **in
	}
	if in.KubernetesWorkflowTool != nil {
		in, out := &in.KubernetesWorkflowTool, &out.KubernetesWorkflowTool
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesInitParameters.
func (in *KubernetesInitParameters) DeepCopy() *KubernetesInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesObservation) DeepCopyInto(out *KubernetesObservation) {
	*out = *in
	if in.KubectlVersion != nil {
		in, out := &in.KubectlVersion, &out.KubectlVersion
		*out = new(string)
		**out = **in
	}
	if in.KubernetesWorkflowTool != nil {
		in, out := &in.KubernetesWorkflowTool, &out.KubernetesWorkflowTool
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesObservation.
func (in *KubernetesObservation) DeepCopy() *KubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesParameters) DeepCopyInto(out *KubernetesParameters) {
	*out = *in
	if in.KubectlVersion != nil {
		in, out := &in.KubectlVersion, &out.KubectlVersion
		*out = new(string)
		**out = **in
	}
	if in.KubernetesWorkflowTool != nil {
		in, out := &in.KubernetesWorkflowTool, &out.KubernetesWorkflowTool
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesParameters.
func (in *KubernetesParameters) DeepCopy() *KubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PulumiInitParameters) DeepCopyInto(out *PulumiInitParameters) {
	*out = *in
	if in.LoginURL != nil {
		in, out := &in.LoginURL, &out.LoginURL
		*out = new(string)
		**out = **in
	}
	if in.StackName != nil {
		in, out := &in.StackName, &out.StackName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PulumiInitParameters.
func (in *PulumiInitParameters) DeepCopy() *PulumiInitParameters {
	if in == nil {
		return nil
	}
	out := new(PulumiInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PulumiObservation) DeepCopyInto(out *PulumiObservation) {
	*out = *in
	if in.LoginURL != nil {
		in, out := &in.LoginURL, &out.LoginURL
		*out = new(string)
		**out = **in
	}
	if in.StackName != nil {
		in, out := &in.StackName, &out.StackName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PulumiObservation.
func (in *PulumiObservation) DeepCopy() *PulumiObservation {
	if in == nil {
		return nil
	}
	out := new(PulumiObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PulumiParameters) DeepCopyInto(out *PulumiParameters) {
	*out = *in
	if in.LoginURL != nil {
		in, out := &in.LoginURL, &out.LoginURL
		*out = new(string)
		**out = **in
	}
	if in.StackName != nil {
		in, out := &in.StackName, &out.StackName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PulumiParameters.
func (in *PulumiParameters) DeepCopy() *PulumiParameters {
	if in == nil {
		return nil
	}
	out := new(PulumiParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawGitInitParameters) DeepCopyInto(out *RawGitInitParameters) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawGitInitParameters.
func (in *RawGitInitParameters) DeepCopy() *RawGitInitParameters {
	if in == nil {
		return nil
	}
	out := new(RawGitInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawGitObservation) DeepCopyInto(out *RawGitObservation) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawGitObservation.
func (in *RawGitObservation) DeepCopy() *RawGitObservation {
	if in == nil {
		return nil
	}
	out := new(RawGitObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawGitParameters) DeepCopyInto(out *RawGitParameters) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawGitParameters.
func (in *RawGitParameters) DeepCopy() *RawGitParameters {
	if in == nil {
		return nil
	}
	out := new(RawGitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShowcaseInitParameters) DeepCopyInto(out *ShowcaseInitParameters) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShowcaseInitParameters.
func (in *ShowcaseInitParameters) DeepCopy() *ShowcaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(ShowcaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShowcaseObservation) DeepCopyInto(out *ShowcaseObservation) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShowcaseObservation.
func (in *ShowcaseObservation) DeepCopy() *ShowcaseObservation {
	if in == nil {
		return nil
	}
	out := new(ShowcaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShowcaseParameters) DeepCopyInto(out *ShowcaseParameters) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShowcaseParameters.
func (in *ShowcaseParameters) DeepCopy() *ShowcaseParameters {
	if in == nil {
		return nil
	}
	out := new(ShowcaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Stack) DeepCopyInto(out *Stack) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Stack.
func (in *Stack) DeepCopy() *Stack {
	if in == nil {
		return nil
	}
	out := new(Stack)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Stack) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StackInitParameters) DeepCopyInto(out *StackInitParameters) {
	*out = *in
	if in.AdditionalProjectGlobs != nil {
		in, out := &in.AdditionalProjectGlobs, &out.AdditionalProjectGlobs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Administrative != nil {
		in, out := &in.Administrative, &out.Administrative
		*out = new(bool)
		**out = **in
	}
	if in.AfterApply != nil {
		in, out := &in.AfterApply, &out.AfterApply
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterDestroy != nil {
		in, out := &in.AfterDestroy, &out.AfterDestroy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterInit != nil {
		in, out := &in.AfterInit, &out.AfterInit
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterPerform != nil {
		in, out := &in.AfterPerform, &out.AfterPerform
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterPlan != nil {
		in, out := &in.AfterPlan, &out.AfterPlan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterRun != nil {
		in, out := &in.AfterRun, &out.AfterRun
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ansible != nil {
		in, out := &in.Ansible, &out.Ansible
		*out = make([]AnsibleInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Autodeploy != nil {
		in, out := &in.Autodeploy, &out.Autodeploy
		*out = new(bool)
		**out = **in
	}
	if in.Autoretry != nil {
		in, out := &in.Autoretry, &out.Autoretry
		*out = new(bool)
		**out = **in
	}
	if in.AzureDevops != nil {
		in, out := &in.AzureDevops, &out.AzureDevops
		*out = make([]AzureDevopsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BeforeApply != nil {
		in, out := &in.BeforeApply, &out.BeforeApply
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforeDestroy != nil {
		in, out := &in.BeforeDestroy, &out.BeforeDestroy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforeInit != nil {
		in, out := &in.BeforeInit, &out.BeforeInit
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforePerform != nil {
		in, out := &in.BeforePerform, &out.BeforePerform
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforePlan != nil {
		in, out := &in.BeforePlan, &out.BeforePlan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BitbucketCloud != nil {
		in, out := &in.BitbucketCloud, &out.BitbucketCloud
		*out = make([]BitbucketCloudInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketDatacenter != nil {
		in, out := &in.BitbucketDatacenter, &out.BitbucketDatacenter
		*out = make([]BitbucketDatacenterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CloudFormation != nil {
		in, out := &in.CloudFormation, &out.CloudFormation
		*out = make([]CloudFormationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableLocalPreview != nil {
		in, out := &in.EnableLocalPreview, &out.EnableLocalPreview
		*out = new(bool)
		**out = **in
	}
	if in.EnableSensitiveOutputsUpload != nil {
		in, out := &in.EnableSensitiveOutputsUpload, &out.EnableSensitiveOutputsUpload
		*out = new(bool)
		**out = **in
	}
	if in.EnableWellKnownSecretMasking != nil {
		in, out := &in.EnableWellKnownSecretMasking, &out.EnableWellKnownSecretMasking
		*out = new(bool)
		**out = **in
	}
	if in.GithubActionDeploy != nil {
		in, out := &in.GithubActionDeploy, &out.GithubActionDeploy
		*out = new(bool)
		**out = **in
	}
	if in.GithubEnterprise != nil {
		in, out := &in.GithubEnterprise, &out.GithubEnterprise
		*out = make([]GithubEnterpriseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Gitlab != nil {
		in, out := &in.Gitlab, &out.Gitlab
		*out = make([]GitlabInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ImportStateFile != nil {
		in, out := &in.ImportStateFile, &out.ImportStateFile
		*out = new(string)
		**out = **in
	}
	if in.ImportStateSecretRef != nil {
		in, out := &in.ImportStateSecretRef, &out.ImportStateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Kubernetes != nil {
		in, out := &in.Kubernetes, &out.Kubernetes
		*out = make([]KubernetesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ManageState != nil {
		in, out := &in.ManageState, &out.ManageState
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectRoot != nil {
		in, out := &in.ProjectRoot, &out.ProjectRoot
		*out = new(string)
		**out = **in
	}
	if in.ProtectFromDeletion != nil {
		in, out := &in.ProtectFromDeletion, &out.ProtectFromDeletion
		*out = new(bool)
		**out = **in
	}
	if in.Pulumi != nil {
		in, out := &in.Pulumi, &out.Pulumi
		*out = make([]PulumiInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RawGit != nil {
		in, out := &in.RawGit, &out.RawGit
		*out = make([]RawGitInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.RunnerImage != nil {
		in, out := &in.RunnerImage, &out.RunnerImage
		*out = new(string)
		**out = **in
	}
	if in.Showcase != nil {
		in, out := &in.Showcase, &out.Showcase
		*out = make([]ShowcaseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Slug != nil {
		in, out := &in.Slug, &out.Slug
		*out = new(string)
		**out = **in
	}
	if in.SpaceID != nil {
		in, out := &in.SpaceID, &out.SpaceID
		*out = new(string)
		**out = **in
	}
	if in.SpaceIDRef != nil {
		in, out := &in.SpaceIDRef, &out.SpaceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SpaceIDSelector != nil {
		in, out := &in.SpaceIDSelector, &out.SpaceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TerraformExternalStateAccess != nil {
		in, out := &in.TerraformExternalStateAccess, &out.TerraformExternalStateAccess
		*out = new(bool)
		**out = **in
	}
	if in.TerraformSmartSanitization != nil {
		in, out := &in.TerraformSmartSanitization, &out.TerraformSmartSanitization
		*out = new(bool)
		**out = **in
	}
	if in.TerraformVersion != nil {
		in, out := &in.TerraformVersion, &out.TerraformVersion
		*out = new(string)
		**out = **in
	}
	if in.TerraformWorkflowTool != nil {
		in, out := &in.TerraformWorkflowTool, &out.TerraformWorkflowTool
		*out = new(string)
		**out = **in
	}
	if in.TerraformWorkspace != nil {
		in, out := &in.TerraformWorkspace, &out.TerraformWorkspace
		*out = new(string)
		**out = **in
	}
	if in.Terragrunt != nil {
		in, out := &in.Terragrunt, &out.Terragrunt
		*out = make([]TerragruntInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerPoolID != nil {
		in, out := &in.WorkerPoolID, &out.WorkerPoolID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StackInitParameters.
func (in *StackInitParameters) DeepCopy() *StackInitParameters {
	if in == nil {
		return nil
	}
	out := new(StackInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StackList) DeepCopyInto(out *StackList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Stack, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StackList.
func (in *StackList) DeepCopy() *StackList {
	if in == nil {
		return nil
	}
	out := new(StackList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *StackList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StackObservation) DeepCopyInto(out *StackObservation) {
	*out = *in
	if in.AdditionalProjectGlobs != nil {
		in, out := &in.AdditionalProjectGlobs, &out.AdditionalProjectGlobs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Administrative != nil {
		in, out := &in.Administrative, &out.Administrative
		*out = new(bool)
		**out = **in
	}
	if in.AfterApply != nil {
		in, out := &in.AfterApply, &out.AfterApply
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterDestroy != nil {
		in, out := &in.AfterDestroy, &out.AfterDestroy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterInit != nil {
		in, out := &in.AfterInit, &out.AfterInit
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterPerform != nil {
		in, out := &in.AfterPerform, &out.AfterPerform
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterPlan != nil {
		in, out := &in.AfterPlan, &out.AfterPlan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterRun != nil {
		in, out := &in.AfterRun, &out.AfterRun
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ansible != nil {
		in, out := &in.Ansible, &out.Ansible
		*out = make([]AnsibleObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Autodeploy != nil {
		in, out := &in.Autodeploy, &out.Autodeploy
		*out = new(bool)
		**out = **in
	}
	if in.Autoretry != nil {
		in, out := &in.Autoretry, &out.Autoretry
		*out = new(bool)
		**out = **in
	}
	if in.AwsAssumeRolePolicyStatement != nil {
		in, out := &in.AwsAssumeRolePolicyStatement, &out.AwsAssumeRolePolicyStatement
		*out = new(string)
		**out = **in
	}
	if in.AzureDevops != nil {
		in, out := &in.AzureDevops, &out.AzureDevops
		*out = make([]AzureDevopsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BeforeApply != nil {
		in, out := &in.BeforeApply, &out.BeforeApply
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforeDestroy != nil {
		in, out := &in.BeforeDestroy, &out.BeforeDestroy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforeInit != nil {
		in, out := &in.BeforeInit, &out.BeforeInit
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforePerform != nil {
		in, out := &in.BeforePerform, &out.BeforePerform
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforePlan != nil {
		in, out := &in.BeforePlan, &out.BeforePlan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BitbucketCloud != nil {
		in, out := &in.BitbucketCloud, &out.BitbucketCloud
		*out = make([]BitbucketCloudObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketDatacenter != nil {
		in, out := &in.BitbucketDatacenter, &out.BitbucketDatacenter
		*out = make([]BitbucketDatacenterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CloudFormation != nil {
		in, out := &in.CloudFormation, &out.CloudFormation
		*out = make([]CloudFormationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableLocalPreview != nil {
		in, out := &in.EnableLocalPreview, &out.EnableLocalPreview
		*out = new(bool)
		**out = **in
	}
	if in.EnableSensitiveOutputsUpload != nil {
		in, out := &in.EnableSensitiveOutputsUpload, &out.EnableSensitiveOutputsUpload
		*out = new(bool)
		**out = **in
	}
	if in.EnableWellKnownSecretMasking != nil {
		in, out := &in.EnableWellKnownSecretMasking, &out.EnableWellKnownSecretMasking
		*out = new(bool)
		**out = **in
	}
	if in.GithubActionDeploy != nil {
		in, out := &in.GithubActionDeploy, &out.GithubActionDeploy
		*out = new(bool)
		**out = **in
	}
	if in.GithubEnterprise != nil {
		in, out := &in.GithubEnterprise, &out.GithubEnterprise
		*out = make([]GithubEnterpriseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Gitlab != nil {
		in, out := &in.Gitlab, &out.Gitlab
		*out = make([]GitlabObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImportStateFile != nil {
		in, out := &in.ImportStateFile, &out.ImportStateFile
		*out = new(string)
		**out = **in
	}
	if in.Kubernetes != nil {
		in, out := &in.Kubernetes, &out.Kubernetes
		*out = make([]KubernetesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ManageState != nil {
		in, out := &in.ManageState, &out.ManageState
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectRoot != nil {
		in, out := &in.ProjectRoot, &out.ProjectRoot
		*out = new(string)
		**out = **in
	}
	if in.ProtectFromDeletion != nil {
		in, out := &in.ProtectFromDeletion, &out.ProtectFromDeletion
		*out = new(bool)
		**out = **in
	}
	if in.Pulumi != nil {
		in, out := &in.Pulumi, &out.Pulumi
		*out = make([]PulumiObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RawGit != nil {
		in, out := &in.RawGit, &out.RawGit
		*out = make([]RawGitObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.RunnerImage != nil {
		in, out := &in.RunnerImage, &out.RunnerImage
		*out = new(string)
		**out = **in
	}
	if in.Showcase != nil {
		in, out := &in.Showcase, &out.Showcase
		*out = make([]ShowcaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Slug != nil {
		in, out := &in.Slug, &out.Slug
		*out = new(string)
		**out = **in
	}
	if in.SpaceID != nil {
		in, out := &in.SpaceID, &out.SpaceID
		*out = new(string)
		**out = **in
	}
	if in.TerraformExternalStateAccess != nil {
		in, out := &in.TerraformExternalStateAccess, &out.TerraformExternalStateAccess
		*out = new(bool)
		**out = **in
	}
	if in.TerraformSmartSanitization != nil {
		in, out := &in.TerraformSmartSanitization, &out.TerraformSmartSanitization
		*out = new(bool)
		**out = **in
	}
	if in.TerraformVersion != nil {
		in, out := &in.TerraformVersion, &out.TerraformVersion
		*out = new(string)
		**out = **in
	}
	if in.TerraformWorkflowTool != nil {
		in, out := &in.TerraformWorkflowTool, &out.TerraformWorkflowTool
		*out = new(string)
		**out = **in
	}
	if in.TerraformWorkspace != nil {
		in, out := &in.TerraformWorkspace, &out.TerraformWorkspace
		*out = new(string)
		**out = **in
	}
	if in.Terragrunt != nil {
		in, out := &in.Terragrunt, &out.Terragrunt
		*out = make([]TerragruntObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerPoolID != nil {
		in, out := &in.WorkerPoolID, &out.WorkerPoolID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StackObservation.
func (in *StackObservation) DeepCopy() *StackObservation {
	if in == nil {
		return nil
	}
	out := new(StackObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StackParameters) DeepCopyInto(out *StackParameters) {
	*out = *in
	if in.AdditionalProjectGlobs != nil {
		in, out := &in.AdditionalProjectGlobs, &out.AdditionalProjectGlobs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Administrative != nil {
		in, out := &in.Administrative, &out.Administrative
		*out = new(bool)
		**out = **in
	}
	if in.AfterApply != nil {
		in, out := &in.AfterApply, &out.AfterApply
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterDestroy != nil {
		in, out := &in.AfterDestroy, &out.AfterDestroy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterInit != nil {
		in, out := &in.AfterInit, &out.AfterInit
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterPerform != nil {
		in, out := &in.AfterPerform, &out.AfterPerform
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterPlan != nil {
		in, out := &in.AfterPlan, &out.AfterPlan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AfterRun != nil {
		in, out := &in.AfterRun, &out.AfterRun
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ansible != nil {
		in, out := &in.Ansible, &out.Ansible
		*out = make([]AnsibleParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Autodeploy != nil {
		in, out := &in.Autodeploy, &out.Autodeploy
		*out = new(bool)
		**out = **in
	}
	if in.Autoretry != nil {
		in, out := &in.Autoretry, &out.Autoretry
		*out = new(bool)
		**out = **in
	}
	if in.AzureDevops != nil {
		in, out := &in.AzureDevops, &out.AzureDevops
		*out = make([]AzureDevopsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BeforeApply != nil {
		in, out := &in.BeforeApply, &out.BeforeApply
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforeDestroy != nil {
		in, out := &in.BeforeDestroy, &out.BeforeDestroy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforeInit != nil {
		in, out := &in.BeforeInit, &out.BeforeInit
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforePerform != nil {
		in, out := &in.BeforePerform, &out.BeforePerform
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BeforePlan != nil {
		in, out := &in.BeforePlan, &out.BeforePlan
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.BitbucketCloud != nil {
		in, out := &in.BitbucketCloud, &out.BitbucketCloud
		*out = make([]BitbucketCloudParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketDatacenter != nil {
		in, out := &in.BitbucketDatacenter, &out.BitbucketDatacenter
		*out = make([]BitbucketDatacenterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CloudFormation != nil {
		in, out := &in.CloudFormation, &out.CloudFormation
		*out = make([]CloudFormationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableLocalPreview != nil {
		in, out := &in.EnableLocalPreview, &out.EnableLocalPreview
		*out = new(bool)
		**out = **in
	}
	if in.EnableSensitiveOutputsUpload != nil {
		in, out := &in.EnableSensitiveOutputsUpload, &out.EnableSensitiveOutputsUpload
		*out = new(bool)
		**out = **in
	}
	if in.EnableWellKnownSecretMasking != nil {
		in, out := &in.EnableWellKnownSecretMasking, &out.EnableWellKnownSecretMasking
		*out = new(bool)
		**out = **in
	}
	if in.GithubActionDeploy != nil {
		in, out := &in.GithubActionDeploy, &out.GithubActionDeploy
		*out = new(bool)
		**out = **in
	}
	if in.GithubEnterprise != nil {
		in, out := &in.GithubEnterprise, &out.GithubEnterprise
		*out = make([]GithubEnterpriseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Gitlab != nil {
		in, out := &in.Gitlab, &out.Gitlab
		*out = make([]GitlabParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ImportStateFile != nil {
		in, out := &in.ImportStateFile, &out.ImportStateFile
		*out = new(string)
		**out = **in
	}
	if in.ImportStateSecretRef != nil {
		in, out := &in.ImportStateSecretRef, &out.ImportStateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Kubernetes != nil {
		in, out := &in.Kubernetes, &out.Kubernetes
		*out = make([]KubernetesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ManageState != nil {
		in, out := &in.ManageState, &out.ManageState
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectRoot != nil {
		in, out := &in.ProjectRoot, &out.ProjectRoot
		*out = new(string)
		**out = **in
	}
	if in.ProtectFromDeletion != nil {
		in, out := &in.ProtectFromDeletion, &out.ProtectFromDeletion
		*out = new(bool)
		**out = **in
	}
	if in.Pulumi != nil {
		in, out := &in.Pulumi, &out.Pulumi
		*out = make([]PulumiParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RawGit != nil {
		in, out := &in.RawGit, &out.RawGit
		*out = make([]RawGitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.RunnerImage != nil {
		in, out := &in.RunnerImage, &out.RunnerImage
		*out = new(string)
		**out = **in
	}
	if in.Showcase != nil {
		in, out := &in.Showcase, &out.Showcase
		*out = make([]ShowcaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Slug != nil {
		in, out := &in.Slug, &out.Slug
		*out = new(string)
		**out = **in
	}
	if in.SpaceID != nil {
		in, out := &in.SpaceID, &out.SpaceID
		*out = new(string)
		**out = **in
	}
	if in.SpaceIDRef != nil {
		in, out := &in.SpaceIDRef, &out.SpaceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SpaceIDSelector != nil {
		in, out := &in.SpaceIDSelector, &out.SpaceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TerraformExternalStateAccess != nil {
		in, out := &in.TerraformExternalStateAccess, &out.TerraformExternalStateAccess
		*out = new(bool)
		**out = **in
	}
	if in.TerraformSmartSanitization != nil {
		in, out := &in.TerraformSmartSanitization, &out.TerraformSmartSanitization
		*out = new(bool)
		**out = **in
	}
	if in.TerraformVersion != nil {
		in, out := &in.TerraformVersion, &out.TerraformVersion
		*out = new(string)
		**out = **in
	}
	if in.TerraformWorkflowTool != nil {
		in, out := &in.TerraformWorkflowTool, &out.TerraformWorkflowTool
		*out = new(string)
		**out = **in
	}
	if in.TerraformWorkspace != nil {
		in, out := &in.TerraformWorkspace, &out.TerraformWorkspace
		*out = new(string)
		**out = **in
	}
	if in.Terragrunt != nil {
		in, out := &in.Terragrunt, &out.Terragrunt
		*out = make([]TerragruntParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerPoolID != nil {
		in, out := &in.WorkerPoolID, &out.WorkerPoolID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StackParameters.
func (in *StackParameters) DeepCopy() *StackParameters {
	if in == nil {
		return nil
	}
	out := new(StackParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StackSpec) DeepCopyInto(out *StackSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StackSpec.
func (in *StackSpec) DeepCopy() *StackSpec {
	if in == nil {
		return nil
	}
	out := new(StackSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StackStatus) DeepCopyInto(out *StackStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StackStatus.
func (in *StackStatus) DeepCopy() *StackStatus {
	if in == nil {
		return nil
	}
	out := new(StackStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerragruntInitParameters) DeepCopyInto(out *TerragruntInitParameters) {
	*out = *in
	if in.TerraformVersion != nil {
		in, out := &in.TerraformVersion, &out.TerraformVersion
		*out = new(string)
		**out = **in
	}
	if in.TerragruntVersion != nil {
		in, out := &in.TerragruntVersion, &out.TerragruntVersion
		*out = new(string)
		**out = **in
	}
	if in.Tool != nil {
		in, out := &in.Tool, &out.Tool
		*out = new(string)
		**out = **in
	}
	if in.UseRunAll != nil {
		in, out := &in.UseRunAll, &out.UseRunAll
		*out = new(bool)
		**out = **in
	}
	if in.UseSmartSanitization != nil {
		in, out := &in.UseSmartSanitization, &out.UseSmartSanitization
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerragruntInitParameters.
func (in *TerragruntInitParameters) DeepCopy() *TerragruntInitParameters {
	if in == nil {
		return nil
	}
	out := new(TerragruntInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerragruntObservation) DeepCopyInto(out *TerragruntObservation) {
	*out = *in
	if in.TerraformVersion != nil {
		in, out := &in.TerraformVersion, &out.TerraformVersion
		*out = new(string)
		**out = **in
	}
	if in.TerragruntVersion != nil {
		in, out := &in.TerragruntVersion, &out.TerragruntVersion
		*out = new(string)
		**out = **in
	}
	if in.Tool != nil {
		in, out := &in.Tool, &out.Tool
		*out = new(string)
		**out = **in
	}
	if in.UseRunAll != nil {
		in, out := &in.UseRunAll, &out.UseRunAll
		*out = new(bool)
		**out = **in
	}
	if in.UseSmartSanitization != nil {
		in, out := &in.UseSmartSanitization, &out.UseSmartSanitization
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerragruntObservation.
func (in *TerragruntObservation) DeepCopy() *TerragruntObservation {
	if in == nil {
		return nil
	}
	out := new(TerragruntObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerragruntParameters) DeepCopyInto(out *TerragruntParameters) {
	*out = *in
	if in.TerraformVersion != nil {
		in, out := &in.TerraformVersion, &out.TerraformVersion
		*out = new(string)
		**out = **in
	}
	if in.TerragruntVersion != nil {
		in, out := &in.TerragruntVersion, &out.TerragruntVersion
		*out = new(string)
		**out = **in
	}
	if in.Tool != nil {
		in, out := &in.Tool, &out.Tool
		*out = new(string)
		**out = **in
	}
	if in.UseRunAll != nil {
		in, out := &in.UseRunAll, &out.UseRunAll
		*out = new(bool)
		**out = **in
	}
	if in.UseSmartSanitization != nil {
		in, out := &in.UseSmartSanitization, &out.UseSmartSanitization
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerragruntParameters.
func (in *TerragruntParameters) DeepCopy() *TerragruntParameters {
	if in == nil {
		return nil
	}
	out := new(TerragruntParameters)
	in.DeepCopyInto(out)
	return out
}
