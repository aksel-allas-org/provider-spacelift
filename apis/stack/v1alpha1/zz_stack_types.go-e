// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnsibleInitParameters struct {

	// (String) The playbook Ansible should run.
	// The playbook Ansible should run.
	Playbook *string `json:"playbook,omitempty" tf:"playbook,omitempty"`
}

type AnsibleObservation struct {

	// (String) The playbook Ansible should run.
	// The playbook Ansible should run.
	Playbook *string `json:"playbook,omitempty" tf:"playbook,omitempty"`
}

type AnsibleParameters struct {

	// (String) The playbook Ansible should run.
	// The playbook Ansible should run.
	// +kubebuilder:validation:Optional
	Playbook *string `json:"playbook" tf:"playbook,omitempty"`
}

type AzureDevopsInitParameters struct {

	// (String) The ID of this resource.
	// The ID of the Azure Devops integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the Azure DevOps project
	// The name of the Azure DevOps project
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type AzureDevopsObservation struct {

	// (String) The ID of this resource.
	// The ID of the Azure Devops integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether this is the default Azure DevOps integration
	// Indicates whether this is the default Azure DevOps integration
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The name of the Azure DevOps project
	// The name of the Azure DevOps project
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type AzureDevopsParameters struct {

	// (String) The ID of this resource.
	// The ID of the Azure Devops integration. If not specified, the default integration will be used.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the Azure DevOps project
	// The name of the Azure DevOps project
	// +kubebuilder:validation:Optional
	Project *string `json:"project" tf:"project,omitempty"`
}

type BitbucketCloudInitParameters struct {

	// (String) The ID of this resource.
	// The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The Bitbucket project containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type BitbucketCloudObservation struct {

	// (String) The ID of this resource.
	// The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether this is the default Azure DevOps integration
	// Indicates whether this is the default Bitbucket Cloud integration
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The Bitbucket project containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type BitbucketCloudParameters struct {

	// (String) The ID of this resource.
	// The ID of the Bitbucket Cloud integration. If not specified, the default integration will be used.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The Bitbucket project containing the repository
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type BitbucketDatacenterInitParameters struct {

	// (String) The ID of this resource.
	// The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The Bitbucket project containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type BitbucketDatacenterObservation struct {

	// (String) The ID of this resource.
	// The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether this is the default Azure DevOps integration
	// Indicates whether this is the default Bitbucket Datacenter integration
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The Bitbucket project containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type BitbucketDatacenterParameters struct {

	// (String) The ID of this resource.
	// The ID of the Bitbucket Datacenter integration. If not specified, the default integration will be used.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The Bitbucket project containing the repository
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type CloudFormationInitParameters struct {

	// (String) Template file cloudformation package will be called on
	// Template file `cloudformation package` will be called on
	EntryTemplateFile *string `json:"entryTemplateFile,omitempty" tf:"entry_template_file,omitempty"`

	// (String) AWS region to use
	// AWS region to use
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) CloudFormation stack name
	// CloudFormation stack name
	StackName *string `json:"stackName,omitempty" tf:"stack_name,omitempty"`

	// (String) S3 bucket to save CloudFormation templates to
	// S3 bucket to save CloudFormation templates to
	TemplateBucket *string `json:"templateBucket,omitempty" tf:"template_bucket,omitempty"`
}

type CloudFormationObservation struct {

	// (String) Template file cloudformation package will be called on
	// Template file `cloudformation package` will be called on
	EntryTemplateFile *string `json:"entryTemplateFile,omitempty" tf:"entry_template_file,omitempty"`

	// (String) AWS region to use
	// AWS region to use
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) CloudFormation stack name
	// CloudFormation stack name
	StackName *string `json:"stackName,omitempty" tf:"stack_name,omitempty"`

	// (String) S3 bucket to save CloudFormation templates to
	// S3 bucket to save CloudFormation templates to
	TemplateBucket *string `json:"templateBucket,omitempty" tf:"template_bucket,omitempty"`
}

type CloudFormationParameters struct {

	// (String) Template file cloudformation package will be called on
	// Template file `cloudformation package` will be called on
	// +kubebuilder:validation:Optional
	EntryTemplateFile *string `json:"entryTemplateFile" tf:"entry_template_file,omitempty"`

	// (String) AWS region to use
	// AWS region to use
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// (String) CloudFormation stack name
	// CloudFormation stack name
	// +kubebuilder:validation:Optional
	StackName *string `json:"stackName" tf:"stack_name,omitempty"`

	// (String) S3 bucket to save CloudFormation templates to
	// S3 bucket to save CloudFormation templates to
	// +kubebuilder:validation:Optional
	TemplateBucket *string `json:"templateBucket" tf:"template_bucket,omitempty"`
}

type GithubEnterpriseInitParameters struct {

	// (String) The ID of this resource.
	// The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The GitHub organization / user the repository belongs to
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type GithubEnterpriseObservation struct {

	// (String) The ID of this resource.
	// The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether this is the default Azure DevOps integration
	// Indicates whether this is the default GitHub Enterprise integration
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The GitHub organization / user the repository belongs to
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type GithubEnterpriseParameters struct {

	// (String) The ID of this resource.
	// The ID of the GitHub Enterprise integration. If not specified, the default integration will be used.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The GitHub organization / user the repository belongs to
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type GitlabInitParameters struct {

	// (String) The ID of this resource.
	// The ID of the Gitlab integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The GitLab namespace containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type GitlabObservation struct {

	// (String) The ID of this resource.
	// The ID of the Gitlab integration. If not specified, the default integration will be used.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether this is the default Azure DevOps integration
	// Indicates whether this is the default GitLab integration
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The GitLab namespace containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type GitlabParameters struct {

	// (String) The ID of this resource.
	// The ID of the Gitlab integration. If not specified, the default integration will be used.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Bitbucket project containing the repository
	// The GitLab namespace containing the repository
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type KubernetesInitParameters struct {

	// (String) Kubectl version.
	// Kubectl version.
	KubectlVersion *string `json:"kubectlVersion,omitempty" tf:"kubectl_version,omitempty"`

	// (String) Defines the tool that will be used to execute the workflow. This can be one of KUBERNETES or CUSTOM. Defaults to KUBERNETES.
	// Defines the tool that will be used to execute the workflow. This can be one of `KUBERNETES` or `CUSTOM`. Defaults to `KUBERNETES`.
	KubernetesWorkflowTool *string `json:"kubernetesWorkflowTool,omitempty" tf:"kubernetes_workflow_tool,omitempty"`

	// (String) The Bitbucket project containing the repository
	// Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type KubernetesObservation struct {

	// (String) Kubectl version.
	// Kubectl version.
	KubectlVersion *string `json:"kubectlVersion,omitempty" tf:"kubectl_version,omitempty"`

	// (String) Defines the tool that will be used to execute the workflow. This can be one of KUBERNETES or CUSTOM. Defaults to KUBERNETES.
	// Defines the tool that will be used to execute the workflow. This can be one of `KUBERNETES` or `CUSTOM`. Defaults to `KUBERNETES`.
	KubernetesWorkflowTool *string `json:"kubernetesWorkflowTool,omitempty" tf:"kubernetes_workflow_tool,omitempty"`

	// (String) The Bitbucket project containing the repository
	// Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type KubernetesParameters struct {

	// (String) Kubectl version.
	// Kubectl version.
	// +kubebuilder:validation:Optional
	KubectlVersion *string `json:"kubectlVersion,omitempty" tf:"kubectl_version,omitempty"`

	// (String) Defines the tool that will be used to execute the workflow. This can be one of KUBERNETES or CUSTOM. Defaults to KUBERNETES.
	// Defines the tool that will be used to execute the workflow. This can be one of `KUBERNETES` or `CUSTOM`. Defaults to `KUBERNETES`.
	// +kubebuilder:validation:Optional
	KubernetesWorkflowTool *string `json:"kubernetesWorkflowTool,omitempty" tf:"kubernetes_workflow_tool,omitempty"`

	// (String) The Bitbucket project containing the repository
	// Namespace of the Kubernetes cluster to run commands on. Leave empty for multi-namespace Stacks.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type PulumiInitParameters struct {

	// (String) State backend to log into on Run initialize.
	// State backend to log into on Run initialize.
	LoginURL *string `json:"loginUrl,omitempty" tf:"login_url,omitempty"`

	// (String) CloudFormation stack name
	// Pulumi stack name to use with the state backend.
	StackName *string `json:"stackName,omitempty" tf:"stack_name,omitempty"`
}

type PulumiObservation struct {

	// (String) State backend to log into on Run initialize.
	// State backend to log into on Run initialize.
	LoginURL *string `json:"loginUrl,omitempty" tf:"login_url,omitempty"`

	// (String) CloudFormation stack name
	// Pulumi stack name to use with the state backend.
	StackName *string `json:"stackName,omitempty" tf:"stack_name,omitempty"`
}

type PulumiParameters struct {

	// (String) State backend to log into on Run initialize.
	// State backend to log into on Run initialize.
	// +kubebuilder:validation:Optional
	LoginURL *string `json:"loginUrl" tf:"login_url,omitempty"`

	// (String) CloudFormation stack name
	// Pulumi stack name to use with the state backend.
	// +kubebuilder:validation:Optional
	StackName *string `json:"stackName" tf:"stack_name,omitempty"`
}

type RawGitInitParameters struct {

	// (String) The Bitbucket project containing the repository
	// User-friendly namespace for the repository, this is for cosmetic purposes only
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) HTTPS URL of the Git repository
	// HTTPS URL of the Git repository
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RawGitObservation struct {

	// (String) The Bitbucket project containing the repository
	// User-friendly namespace for the repository, this is for cosmetic purposes only
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) HTTPS URL of the Git repository
	// HTTPS URL of the Git repository
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RawGitParameters struct {

	// (String) The Bitbucket project containing the repository
	// User-friendly namespace for the repository, this is for cosmetic purposes only
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// (String) HTTPS URL of the Git repository
	// HTTPS URL of the Git repository
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

type ShowcaseInitParameters struct {

	// (String) The Bitbucket project containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type ShowcaseObservation struct {

	// (String) The Bitbucket project containing the repository
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type ShowcaseParameters struct {

	// (String) The Bitbucket project containing the repository
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type StackInitParameters struct {

	// (Set of String) Project globs is an optional list of paths to track changes of in addition to the project root.
	// Project globs is an optional list of paths to track changes of in addition to the project root.
	// +listType=set
	AdditionalProjectGlobs []*string `json:"additionalProjectGlobs,omitempty" tf:"additional_project_globs,omitempty"`

	// (Boolean) Indicates whether this stack can manage others. Defaults to false.
	// Indicates whether this stack can manage others. Defaults to `false`.
	Administrative *bool `json:"administrative,omitempty" tf:"administrative,omitempty"`

	// apply scripts
	// List of after-apply scripts
	AfterApply []*string `json:"afterApply,omitempty" tf:"after_apply,omitempty"`

	// destroy scripts
	// List of after-destroy scripts
	AfterDestroy []*string `json:"afterDestroy,omitempty" tf:"after_destroy,omitempty"`

	// init scripts
	// List of after-init scripts
	AfterInit []*string `json:"afterInit,omitempty" tf:"after_init,omitempty"`

	// perform scripts
	// List of after-perform scripts
	AfterPerform []*string `json:"afterPerform,omitempty" tf:"after_perform,omitempty"`

	// plan scripts
	// List of after-plan scripts
	AfterPlan []*string `json:"afterPlan,omitempty" tf:"after_plan,omitempty"`

	// run scripts
	// List of after-run scripts
	AfterRun []*string `json:"afterRun,omitempty" tf:"after_run,omitempty"`

	// specific configuration. Presence means this Stack is an Ansible Stack. (see below for nested schema)
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansible []AnsibleInitParameters `json:"ansible,omitempty" tf:"ansible,omitempty"`

	// (Boolean) Indicates whether changes to this stack can be automatically deployed. Defaults to false.
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	Autodeploy *bool `json:"autodeploy,omitempty" tf:"autodeploy,omitempty"`

	// (Boolean) Indicates whether obsolete proposed changes should automatically be retried. Defaults to false.
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	Autoretry *bool `json:"autoretry,omitempty" tf:"autoretry,omitempty"`

	// (Block List, Max: 1) Azure DevOps VCS settings (see below for nested schema)
	// Azure DevOps VCS settings
	AzureDevops []AzureDevopsInitParameters `json:"azureDevops,omitempty" tf:"azure_devops,omitempty"`

	// apply scripts
	// List of before-apply scripts
	BeforeApply []*string `json:"beforeApply,omitempty" tf:"before_apply,omitempty"`

	// destroy scripts
	// List of before-destroy scripts
	BeforeDestroy []*string `json:"beforeDestroy,omitempty" tf:"before_destroy,omitempty"`

	// init scripts
	// List of before-init scripts
	BeforeInit []*string `json:"beforeInit,omitempty" tf:"before_init,omitempty"`

	// perform scripts
	// List of before-perform scripts
	BeforePerform []*string `json:"beforePerform,omitempty" tf:"before_perform,omitempty"`

	// plan scripts
	// List of before-plan scripts
	BeforePlan []*string `json:"beforePlan,omitempty" tf:"before_plan,omitempty"`

	// (Block List, Max: 1) Bitbucket Cloud VCS settings (see below for nested schema)
	// Bitbucket Cloud VCS settings
	BitbucketCloud []BitbucketCloudInitParameters `json:"bitbucketCloud,omitempty" tf:"bitbucket_cloud,omitempty"`

	// (Block List, Max: 1) Bitbucket Datacenter VCS settings (see below for nested schema)
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter []BitbucketDatacenterInitParameters `json:"bitbucketDatacenter,omitempty" tf:"bitbucket_datacenter,omitempty"`

	// (String) Git branch to apply changes to
	// Git branch to apply changes to
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// specific configuration. Presence means this Stack is a CloudFormation Stack. (see below for nested schema)
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	CloudFormation []CloudFormationInitParameters `json:"cloudformation,omitempty" tf:"cloudformation,omitempty"`

	// form stack description for users
	// Free-form stack description for users
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Indicates whether local preview runs can be triggered on this Stack. Defaults to false.
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	EnableLocalPreview *bool `json:"enableLocalPreview,omitempty" tf:"enable_local_preview,omitempty"`

	// (Boolean) Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults to true.
	// Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults to `true`.
	EnableSensitiveOutputsUpload *bool `json:"enableSensitiveOutputsUpload,omitempty" tf:"enable_sensitive_outputs_upload,omitempty"`

	// known secret masking is enabled.
	// Indicates whether well-known secret masking is enabled.
	EnableWellKnownSecretMasking *bool `json:"enableWellKnownSecretMasking,omitempty" tf:"enable_well_known_secret_masking,omitempty"`

	// (Boolean) Indicates whether GitHub users can deploy from the Checks API. Defaults to true. This is called allow run promotion in the UI.
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`. This is called allow run promotion in the UI.
	GithubActionDeploy *bool `json:"githubActionDeploy,omitempty" tf:"github_action_deploy,omitempty"`

	// (Block List, Max: 1) VCS settings for GitHub custom application (see below for nested schema)
	// VCS settings for [GitHub custom application](https://docs.spacelift.io/integrations/source-control/github#setting-up-the-custom-application)
	GithubEnterprise []GithubEnterpriseInitParameters `json:"githubEnterprise,omitempty" tf:"github_enterprise,omitempty"`

	// (Block List, Max: 1) GitLab VCS settings (see below for nested schema)
	// GitLab VCS settings
	Gitlab []GitlabInitParameters `json:"gitlab,omitempty" tf:"gitlab,omitempty"`

	// (String) Path to the state file to upload when creating a new stack
	// Path to the state file to upload when creating a new stack
	ImportStateFile *string `json:"importStateFile,omitempty" tf:"import_state_file,omitempty"`

	// (String, Sensitive) State file to upload when creating a new stack
	// State file to upload when creating a new stack
	ImportStateSecretRef *v1.SecretKeySelector `json:"importStateSecretRef,omitempty" tf:"-"`

	// specific configuration. Presence means this Stack is a Kubernetes Stack. (see below for nested schema)
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes []KubernetesInitParameters `json:"kubernetes,omitempty" tf:"kubernetes,omitempty"`

	// (Set of String)
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Boolean) Determines if Spacelift should manage state for this stack. Defaults to true.
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	ManageState *bool `json:"manageState,omitempty" tf:"manage_state,omitempty"`

	// should be unique in one account
	// Name of the stack - should be unique in one account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot *string `json:"projectRoot,omitempty" tf:"project_root,omitempty"`

	// (Boolean) Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to false.
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	ProtectFromDeletion *bool `json:"protectFromDeletion,omitempty" tf:"protect_from_deletion,omitempty"`

	// specific configuration. Presence means this Stack is a Pulumi Stack. (see below for nested schema)
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi []PulumiInitParameters `json:"pulumi,omitempty" tf:"pulumi,omitempty"`

	// way VCS integration using a raw Git repository link (see below for nested schema)
	// One-way VCS integration using a raw Git repository link
	RawGit []RawGitInitParameters `json:"rawGit,omitempty" tf:"raw_git,omitempty"`

	// (String) Name of the repository, without the owner part
	// Name of the repository, without the owner part
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// (String) Name of the Docker image used to process Runs
	// Name of the Docker image used to process Runs
	RunnerImage *string `json:"runnerImage,omitempty" tf:"runner_image,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Showcase []ShowcaseInitParameters `json:"showcase,omitempty" tf:"showcase,omitempty"`

	// (String) Allows setting the custom ID (slug) for the stack
	// Allows setting the custom ID (slug) for the stack
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String) ID (slug) of the space the stack is in. Defaults to legacy if it exists, otherwise root.
	// ID (slug) of the space the stack is in. Defaults to `legacy` if it exists, otherwise `root`.
	// +crossplane:generate:reference:type=github.com/aksel-allas-org/provider-spacelift/apis/space/v1alpha1.Space
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`

	// (Boolean) Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to false.
	// Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to `false`.
	TerraformExternalStateAccess *bool `json:"terraformExternalStateAccess,omitempty" tf:"terraform_external_state_access,omitempty"`

	// 0.1 or above. Defaults to false.0.1 or above. Defaults to `false`.
	TerraformSmartSanitization *bool `json:"terraformSmartSanitization,omitempty" tf:"terraform_smart_sanitization,omitempty"`

	// (string) provider version to use
	// provider version to use
	TerraformVersion *string `json:"terraformVersion,omitempty" tf:"terraform_version,omitempty"`

	// (String) Defines the tool that will be used to execute the workflow.
	// Defines the tool that will be used to execute the workflow.
	TerraformWorkflowTool *string `json:"terraformWorkflowTool,omitempty" tf:"terraform_workflow_tool,omitempty"`

	// (string) provider workspace to select
	// provider workspace to select
	TerraformWorkspace *string `json:"terraformWorkspace,omitempty" tf:"terraform_workspace,omitempty"`

	// specific configuration. Presence means this Stack is an Terragrunt Stack. (see below for nested schema)
	// Terragrunt-specific configuration. Presence means this Stack is an Terragrunt Stack.
	Terragrunt []TerragruntInitParameters `json:"terragrunt,omitempty" tf:"terragrunt,omitempty"`

	// hosted instance of Spacelift.
	// ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
	WorkerPoolID *string `json:"workerPoolId,omitempty" tf:"worker_pool_id,omitempty"`
}

type StackObservation struct {

	// (Set of String) Project globs is an optional list of paths to track changes of in addition to the project root.
	// Project globs is an optional list of paths to track changes of in addition to the project root.
	// +listType=set
	AdditionalProjectGlobs []*string `json:"additionalProjectGlobs,omitempty" tf:"additional_project_globs,omitempty"`

	// (Boolean) Indicates whether this stack can manage others. Defaults to false.
	// Indicates whether this stack can manage others. Defaults to `false`.
	Administrative *bool `json:"administrative,omitempty" tf:"administrative,omitempty"`

	// apply scripts
	// List of after-apply scripts
	AfterApply []*string `json:"afterApply,omitempty" tf:"after_apply,omitempty"`

	// destroy scripts
	// List of after-destroy scripts
	AfterDestroy []*string `json:"afterDestroy,omitempty" tf:"after_destroy,omitempty"`

	// init scripts
	// List of after-init scripts
	AfterInit []*string `json:"afterInit,omitempty" tf:"after_init,omitempty"`

	// perform scripts
	// List of after-perform scripts
	AfterPerform []*string `json:"afterPerform,omitempty" tf:"after_perform,omitempty"`

	// plan scripts
	// List of after-plan scripts
	AfterPlan []*string `json:"afterPlan,omitempty" tf:"after_plan,omitempty"`

	// run scripts
	// List of after-run scripts
	AfterRun []*string `json:"afterRun,omitempty" tf:"after_run,omitempty"`

	// specific configuration. Presence means this Stack is an Ansible Stack. (see below for nested schema)
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	Ansible []AnsibleObservation `json:"ansible,omitempty" tf:"ansible,omitempty"`

	// (Boolean) Indicates whether changes to this stack can be automatically deployed. Defaults to false.
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	Autodeploy *bool `json:"autodeploy,omitempty" tf:"autodeploy,omitempty"`

	// (Boolean) Indicates whether obsolete proposed changes should automatically be retried. Defaults to false.
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	Autoretry *bool `json:"autoretry,omitempty" tf:"autoretry,omitempty"`

	// (String) AWS IAM assume role policy statement setting up trust relationship
	// AWS IAM assume role policy statement setting up trust relationship
	AwsAssumeRolePolicyStatement *string `json:"awsAssumeRolePolicyStatement,omitempty" tf:"aws_assume_role_policy_statement,omitempty"`

	// (Block List, Max: 1) Azure DevOps VCS settings (see below for nested schema)
	// Azure DevOps VCS settings
	AzureDevops []AzureDevopsObservation `json:"azureDevops,omitempty" tf:"azure_devops,omitempty"`

	// apply scripts
	// List of before-apply scripts
	BeforeApply []*string `json:"beforeApply,omitempty" tf:"before_apply,omitempty"`

	// destroy scripts
	// List of before-destroy scripts
	BeforeDestroy []*string `json:"beforeDestroy,omitempty" tf:"before_destroy,omitempty"`

	// init scripts
	// List of before-init scripts
	BeforeInit []*string `json:"beforeInit,omitempty" tf:"before_init,omitempty"`

	// perform scripts
	// List of before-perform scripts
	BeforePerform []*string `json:"beforePerform,omitempty" tf:"before_perform,omitempty"`

	// plan scripts
	// List of before-plan scripts
	BeforePlan []*string `json:"beforePlan,omitempty" tf:"before_plan,omitempty"`

	// (Block List, Max: 1) Bitbucket Cloud VCS settings (see below for nested schema)
	// Bitbucket Cloud VCS settings
	BitbucketCloud []BitbucketCloudObservation `json:"bitbucketCloud,omitempty" tf:"bitbucket_cloud,omitempty"`

	// (Block List, Max: 1) Bitbucket Datacenter VCS settings (see below for nested schema)
	// Bitbucket Datacenter VCS settings
	BitbucketDatacenter []BitbucketDatacenterObservation `json:"bitbucketDatacenter,omitempty" tf:"bitbucket_datacenter,omitempty"`

	// (String) Git branch to apply changes to
	// Git branch to apply changes to
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// specific configuration. Presence means this Stack is a CloudFormation Stack. (see below for nested schema)
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	CloudFormation []CloudFormationObservation `json:"cloudformation,omitempty" tf:"cloudformation,omitempty"`

	// form stack description for users
	// Free-form stack description for users
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Indicates whether local preview runs can be triggered on this Stack. Defaults to false.
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	EnableLocalPreview *bool `json:"enableLocalPreview,omitempty" tf:"enable_local_preview,omitempty"`

	// (Boolean) Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults to true.
	// Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults to `true`.
	EnableSensitiveOutputsUpload *bool `json:"enableSensitiveOutputsUpload,omitempty" tf:"enable_sensitive_outputs_upload,omitempty"`

	// known secret masking is enabled.
	// Indicates whether well-known secret masking is enabled.
	EnableWellKnownSecretMasking *bool `json:"enableWellKnownSecretMasking,omitempty" tf:"enable_well_known_secret_masking,omitempty"`

	// (Boolean) Indicates whether GitHub users can deploy from the Checks API. Defaults to true. This is called allow run promotion in the UI.
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`. This is called allow run promotion in the UI.
	GithubActionDeploy *bool `json:"githubActionDeploy,omitempty" tf:"github_action_deploy,omitempty"`

	// (Block List, Max: 1) VCS settings for GitHub custom application (see below for nested schema)
	// VCS settings for [GitHub custom application](https://docs.spacelift.io/integrations/source-control/github#setting-up-the-custom-application)
	GithubEnterprise []GithubEnterpriseObservation `json:"githubEnterprise,omitempty" tf:"github_enterprise,omitempty"`

	// (Block List, Max: 1) GitLab VCS settings (see below for nested schema)
	// GitLab VCS settings
	Gitlab []GitlabObservation `json:"gitlab,omitempty" tf:"gitlab,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Path to the state file to upload when creating a new stack
	// Path to the state file to upload when creating a new stack
	ImportStateFile *string `json:"importStateFile,omitempty" tf:"import_state_file,omitempty"`

	// specific configuration. Presence means this Stack is a Kubernetes Stack. (see below for nested schema)
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	Kubernetes []KubernetesObservation `json:"kubernetes,omitempty" tf:"kubernetes,omitempty"`

	// (Set of String)
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Boolean) Determines if Spacelift should manage state for this stack. Defaults to true.
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	ManageState *bool `json:"manageState,omitempty" tf:"manage_state,omitempty"`

	// should be unique in one account
	// Name of the stack - should be unique in one account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	ProjectRoot *string `json:"projectRoot,omitempty" tf:"project_root,omitempty"`

	// (Boolean) Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to false.
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	ProtectFromDeletion *bool `json:"protectFromDeletion,omitempty" tf:"protect_from_deletion,omitempty"`

	// specific configuration. Presence means this Stack is a Pulumi Stack. (see below for nested schema)
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	Pulumi []PulumiObservation `json:"pulumi,omitempty" tf:"pulumi,omitempty"`

	// way VCS integration using a raw Git repository link (see below for nested schema)
	// One-way VCS integration using a raw Git repository link
	RawGit []RawGitObservation `json:"rawGit,omitempty" tf:"raw_git,omitempty"`

	// (String) Name of the repository, without the owner part
	// Name of the repository, without the owner part
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// (String) Name of the Docker image used to process Runs
	// Name of the Docker image used to process Runs
	RunnerImage *string `json:"runnerImage,omitempty" tf:"runner_image,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Showcase []ShowcaseObservation `json:"showcase,omitempty" tf:"showcase,omitempty"`

	// (String) Allows setting the custom ID (slug) for the stack
	// Allows setting the custom ID (slug) for the stack
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String) ID (slug) of the space the stack is in. Defaults to legacy if it exists, otherwise root.
	// ID (slug) of the space the stack is in. Defaults to `legacy` if it exists, otherwise `root`.
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// (Boolean) Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to false.
	// Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to `false`.
	TerraformExternalStateAccess *bool `json:"terraformExternalStateAccess,omitempty" tf:"terraform_external_state_access,omitempty"`

	// 0.1 or above. Defaults to false.0.1 or above. Defaults to `false`.
	TerraformSmartSanitization *bool `json:"terraformSmartSanitization,omitempty" tf:"terraform_smart_sanitization,omitempty"`

	// (string) provider version to use
	// provider version to use
	TerraformVersion *string `json:"terraformVersion,omitempty" tf:"terraform_version,omitempty"`

	// (String) Defines the tool that will be used to execute the workflow.
	// Defines the tool that will be used to execute the workflow.
	TerraformWorkflowTool *string `json:"terraformWorkflowTool,omitempty" tf:"terraform_workflow_tool,omitempty"`

	// (string) provider workspace to select
	// provider workspace to select
	TerraformWorkspace *string `json:"terraformWorkspace,omitempty" tf:"terraform_workspace,omitempty"`

	// specific configuration. Presence means this Stack is an Terragrunt Stack. (see below for nested schema)
	// Terragrunt-specific configuration. Presence means this Stack is an Terragrunt Stack.
	Terragrunt []TerragruntObservation `json:"terragrunt,omitempty" tf:"terragrunt,omitempty"`

	// hosted instance of Spacelift.
	// ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
	WorkerPoolID *string `json:"workerPoolId,omitempty" tf:"worker_pool_id,omitempty"`
}

type StackParameters struct {

	// (Set of String) Project globs is an optional list of paths to track changes of in addition to the project root.
	// Project globs is an optional list of paths to track changes of in addition to the project root.
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalProjectGlobs []*string `json:"additionalProjectGlobs,omitempty" tf:"additional_project_globs,omitempty"`

	// (Boolean) Indicates whether this stack can manage others. Defaults to false.
	// Indicates whether this stack can manage others. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Administrative *bool `json:"administrative,omitempty" tf:"administrative,omitempty"`

	// apply scripts
	// List of after-apply scripts
	// +kubebuilder:validation:Optional
	AfterApply []*string `json:"afterApply,omitempty" tf:"after_apply,omitempty"`

	// destroy scripts
	// List of after-destroy scripts
	// +kubebuilder:validation:Optional
	AfterDestroy []*string `json:"afterDestroy,omitempty" tf:"after_destroy,omitempty"`

	// init scripts
	// List of after-init scripts
	// +kubebuilder:validation:Optional
	AfterInit []*string `json:"afterInit,omitempty" tf:"after_init,omitempty"`

	// perform scripts
	// List of after-perform scripts
	// +kubebuilder:validation:Optional
	AfterPerform []*string `json:"afterPerform,omitempty" tf:"after_perform,omitempty"`

	// plan scripts
	// List of after-plan scripts
	// +kubebuilder:validation:Optional
	AfterPlan []*string `json:"afterPlan,omitempty" tf:"after_plan,omitempty"`

	// run scripts
	// List of after-run scripts
	// +kubebuilder:validation:Optional
	AfterRun []*string `json:"afterRun,omitempty" tf:"after_run,omitempty"`

	// specific configuration. Presence means this Stack is an Ansible Stack. (see below for nested schema)
	// Ansible-specific configuration. Presence means this Stack is an Ansible Stack.
	// +kubebuilder:validation:Optional
	Ansible []AnsibleParameters `json:"ansible,omitempty" tf:"ansible,omitempty"`

	// (Boolean) Indicates whether changes to this stack can be automatically deployed. Defaults to false.
	// Indicates whether changes to this stack can be automatically deployed. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Autodeploy *bool `json:"autodeploy,omitempty" tf:"autodeploy,omitempty"`

	// (Boolean) Indicates whether obsolete proposed changes should automatically be retried. Defaults to false.
	// Indicates whether obsolete proposed changes should automatically be retried. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Autoretry *bool `json:"autoretry,omitempty" tf:"autoretry,omitempty"`

	// (Block List, Max: 1) Azure DevOps VCS settings (see below for nested schema)
	// Azure DevOps VCS settings
	// +kubebuilder:validation:Optional
	AzureDevops []AzureDevopsParameters `json:"azureDevops,omitempty" tf:"azure_devops,omitempty"`

	// apply scripts
	// List of before-apply scripts
	// +kubebuilder:validation:Optional
	BeforeApply []*string `json:"beforeApply,omitempty" tf:"before_apply,omitempty"`

	// destroy scripts
	// List of before-destroy scripts
	// +kubebuilder:validation:Optional
	BeforeDestroy []*string `json:"beforeDestroy,omitempty" tf:"before_destroy,omitempty"`

	// init scripts
	// List of before-init scripts
	// +kubebuilder:validation:Optional
	BeforeInit []*string `json:"beforeInit,omitempty" tf:"before_init,omitempty"`

	// perform scripts
	// List of before-perform scripts
	// +kubebuilder:validation:Optional
	BeforePerform []*string `json:"beforePerform,omitempty" tf:"before_perform,omitempty"`

	// plan scripts
	// List of before-plan scripts
	// +kubebuilder:validation:Optional
	BeforePlan []*string `json:"beforePlan,omitempty" tf:"before_plan,omitempty"`

	// (Block List, Max: 1) Bitbucket Cloud VCS settings (see below for nested schema)
	// Bitbucket Cloud VCS settings
	// +kubebuilder:validation:Optional
	BitbucketCloud []BitbucketCloudParameters `json:"bitbucketCloud,omitempty" tf:"bitbucket_cloud,omitempty"`

	// (Block List, Max: 1) Bitbucket Datacenter VCS settings (see below for nested schema)
	// Bitbucket Datacenter VCS settings
	// +kubebuilder:validation:Optional
	BitbucketDatacenter []BitbucketDatacenterParameters `json:"bitbucketDatacenter,omitempty" tf:"bitbucket_datacenter,omitempty"`

	// (String) Git branch to apply changes to
	// Git branch to apply changes to
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// specific configuration. Presence means this Stack is a CloudFormation Stack. (see below for nested schema)
	// CloudFormation-specific configuration. Presence means this Stack is a CloudFormation Stack.
	// +kubebuilder:validation:Optional
	CloudFormation []CloudFormationParameters `json:"cloudformation,omitempty" tf:"cloudformation,omitempty"`

	// form stack description for users
	// Free-form stack description for users
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Indicates whether local preview runs can be triggered on this Stack. Defaults to false.
	// Indicates whether local preview runs can be triggered on this Stack. Defaults to `false`.
	// +kubebuilder:validation:Optional
	EnableLocalPreview *bool `json:"enableLocalPreview,omitempty" tf:"enable_local_preview,omitempty"`

	// (Boolean) Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults to true.
	// Indicates whether sensitive outputs created by this stack can be uploaded to Spacelift to be used by Stack Dependency references. Triggered only when corresponding option is enabled on the Worker Pool used by the Stack as well. Defaults to `true`.
	// +kubebuilder:validation:Optional
	EnableSensitiveOutputsUpload *bool `json:"enableSensitiveOutputsUpload,omitempty" tf:"enable_sensitive_outputs_upload,omitempty"`

	// known secret masking is enabled.
	// Indicates whether well-known secret masking is enabled.
	// +kubebuilder:validation:Optional
	EnableWellKnownSecretMasking *bool `json:"enableWellKnownSecretMasking,omitempty" tf:"enable_well_known_secret_masking,omitempty"`

	// (Boolean) Indicates whether GitHub users can deploy from the Checks API. Defaults to true. This is called allow run promotion in the UI.
	// Indicates whether GitHub users can deploy from the Checks API. Defaults to `true`. This is called allow run promotion in the UI.
	// +kubebuilder:validation:Optional
	GithubActionDeploy *bool `json:"githubActionDeploy,omitempty" tf:"github_action_deploy,omitempty"`

	// (Block List, Max: 1) VCS settings for GitHub custom application (see below for nested schema)
	// VCS settings for [GitHub custom application](https://docs.spacelift.io/integrations/source-control/github#setting-up-the-custom-application)
	// +kubebuilder:validation:Optional
	GithubEnterprise []GithubEnterpriseParameters `json:"githubEnterprise,omitempty" tf:"github_enterprise,omitempty"`

	// (Block List, Max: 1) GitLab VCS settings (see below for nested schema)
	// GitLab VCS settings
	// +kubebuilder:validation:Optional
	Gitlab []GitlabParameters `json:"gitlab,omitempty" tf:"gitlab,omitempty"`

	// (String) Path to the state file to upload when creating a new stack
	// Path to the state file to upload when creating a new stack
	// +kubebuilder:validation:Optional
	ImportStateFile *string `json:"importStateFile,omitempty" tf:"import_state_file,omitempty"`

	// (String, Sensitive) State file to upload when creating a new stack
	// State file to upload when creating a new stack
	// +kubebuilder:validation:Optional
	ImportStateSecretRef *v1.SecretKeySelector `json:"importStateSecretRef,omitempty" tf:"-"`

	// specific configuration. Presence means this Stack is a Kubernetes Stack. (see below for nested schema)
	// Kubernetes-specific configuration. Presence means this Stack is a Kubernetes Stack.
	// +kubebuilder:validation:Optional
	Kubernetes []KubernetesParameters `json:"kubernetes,omitempty" tf:"kubernetes,omitempty"`

	// (Set of String)
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Boolean) Determines if Spacelift should manage state for this stack. Defaults to true.
	// Determines if Spacelift should manage state for this stack. Defaults to `true`.
	// +kubebuilder:validation:Optional
	ManageState *bool `json:"manageState,omitempty" tf:"manage_state,omitempty"`

	// should be unique in one account
	// Name of the stack - should be unique in one account
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	// Project root is the optional directory relative to the workspace root containing the entrypoint to the Stack.
	// +kubebuilder:validation:Optional
	ProjectRoot *string `json:"projectRoot,omitempty" tf:"project_root,omitempty"`

	// (Boolean) Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to false.
	// Protect this stack from accidental deletion. If set, attempts to delete this stack will fail. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ProtectFromDeletion *bool `json:"protectFromDeletion,omitempty" tf:"protect_from_deletion,omitempty"`

	// specific configuration. Presence means this Stack is a Pulumi Stack. (see below for nested schema)
	// Pulumi-specific configuration. Presence means this Stack is a Pulumi Stack.
	// +kubebuilder:validation:Optional
	Pulumi []PulumiParameters `json:"pulumi,omitempty" tf:"pulumi,omitempty"`

	// way VCS integration using a raw Git repository link (see below for nested schema)
	// One-way VCS integration using a raw Git repository link
	// +kubebuilder:validation:Optional
	RawGit []RawGitParameters `json:"rawGit,omitempty" tf:"raw_git,omitempty"`

	// (String) Name of the repository, without the owner part
	// Name of the repository, without the owner part
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// (String) Name of the Docker image used to process Runs
	// Name of the Docker image used to process Runs
	// +kubebuilder:validation:Optional
	RunnerImage *string `json:"runnerImage,omitempty" tf:"runner_image,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Showcase []ShowcaseParameters `json:"showcase,omitempty" tf:"showcase,omitempty"`

	// (String) Allows setting the custom ID (slug) for the stack
	// Allows setting the custom ID (slug) for the stack
	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String) ID (slug) of the space the stack is in. Defaults to legacy if it exists, otherwise root.
	// ID (slug) of the space the stack is in. Defaults to `legacy` if it exists, otherwise `root`.
	// +crossplane:generate:reference:type=github.com/aksel-allas-org/provider-spacelift/apis/space/v1alpha1.Space
	// +kubebuilder:validation:Optional
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`

	// (Boolean) Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to false.
	// Indicates whether you can access the Stack state file from other stacks or outside of Spacelift. Defaults to `false`.
	// +kubebuilder:validation:Optional
	TerraformExternalStateAccess *bool `json:"terraformExternalStateAccess,omitempty" tf:"terraform_external_state_access,omitempty"`

	// 0.1 or above. Defaults to false.0.1 or above. Defaults to `false`.
	// +kubebuilder:validation:Optional
	TerraformSmartSanitization *bool `json:"terraformSmartSanitization,omitempty" tf:"terraform_smart_sanitization,omitempty"`

	// (string) provider version to use
	// provider version to use
	// +kubebuilder:validation:Optional
	TerraformVersion *string `json:"terraformVersion,omitempty" tf:"terraform_version,omitempty"`

	// (String) Defines the tool that will be used to execute the workflow.
	// Defines the tool that will be used to execute the workflow.
	// +kubebuilder:validation:Optional
	TerraformWorkflowTool *string `json:"terraformWorkflowTool,omitempty" tf:"terraform_workflow_tool,omitempty"`

	// (string) provider workspace to select
	// provider workspace to select
	// +kubebuilder:validation:Optional
	TerraformWorkspace *string `json:"terraformWorkspace,omitempty" tf:"terraform_workspace,omitempty"`

	// specific configuration. Presence means this Stack is an Terragrunt Stack. (see below for nested schema)
	// Terragrunt-specific configuration. Presence means this Stack is an Terragrunt Stack.
	// +kubebuilder:validation:Optional
	Terragrunt []TerragruntParameters `json:"terragrunt,omitempty" tf:"terragrunt,omitempty"`

	// hosted instance of Spacelift.
	// ID of the worker pool to use. NOTE: worker_pool_id is required when using a self-hosted instance of Spacelift.
	// +kubebuilder:validation:Optional
	WorkerPoolID *string `json:"workerPoolId,omitempty" tf:"worker_pool_id,omitempty"`
}

type TerragruntInitParameters struct {

	// Must not be provided when tool is set to MANUALLY_PROVISIONED.
	TerraformVersion *string `json:"terraformVersion,omitempty" tf:"terraform_version,omitempty"`

	// (String) The Terragrunt version. Defaults to the latest Terragrunt version.
	// The Terragrunt version. Defaults to the latest Terragrunt version.
	TerragruntVersion *string `json:"terragruntVersion,omitempty" tf:"terragrunt_version,omitempty"`

	// (String) The IaC tool used by Terragrunt.
	// The IaC tool used by Terragrunt.
	Tool *string `json:"tool,omitempty" tf:"tool,omitempty"`

	// all instead of terragrunt.
	// Whether to use `terragrunt run-all` instead of `terragrunt`.
	UseRunAll *bool `json:"useRunAll,omitempty" tf:"use_run_all,omitempty"`

	UseSmartSanitization *bool `json:"useSmartSanitization,omitempty" tf:"use_smart_sanitization,omitempty"`
}

type TerragruntObservation struct {

	// Must not be provided when tool is set to MANUALLY_PROVISIONED.
	TerraformVersion *string `json:"terraformVersion,omitempty" tf:"terraform_version,omitempty"`

	// (String) The Terragrunt version. Defaults to the latest Terragrunt version.
	// The Terragrunt version. Defaults to the latest Terragrunt version.
	TerragruntVersion *string `json:"terragruntVersion,omitempty" tf:"terragrunt_version,omitempty"`

	// (String) The IaC tool used by Terragrunt.
	// The IaC tool used by Terragrunt.
	Tool *string `json:"tool,omitempty" tf:"tool,omitempty"`

	// all instead of terragrunt.
	// Whether to use `terragrunt run-all` instead of `terragrunt`.
	UseRunAll *bool `json:"useRunAll,omitempty" tf:"use_run_all,omitempty"`

	UseSmartSanitization *bool `json:"useSmartSanitization,omitempty" tf:"use_smart_sanitization,omitempty"`
}

type TerragruntParameters struct {

	// Must not be provided when tool is set to MANUALLY_PROVISIONED.
	// +kubebuilder:validation:Optional
	TerraformVersion *string `json:"terraformVersion,omitempty" tf:"terraform_version,omitempty"`

	// (String) The Terragrunt version. Defaults to the latest Terragrunt version.
	// The Terragrunt version. Defaults to the latest Terragrunt version.
	// +kubebuilder:validation:Optional
	TerragruntVersion *string `json:"terragruntVersion,omitempty" tf:"terragrunt_version,omitempty"`

	// (String) The IaC tool used by Terragrunt.
	// The IaC tool used by Terragrunt.
	// +kubebuilder:validation:Optional
	Tool *string `json:"tool,omitempty" tf:"tool,omitempty"`

	// all instead of terragrunt.
	// Whether to use `terragrunt run-all` instead of `terragrunt`.
	// +kubebuilder:validation:Optional
	UseRunAll *bool `json:"useRunAll,omitempty" tf:"use_run_all,omitempty"`

	// +kubebuilder:validation:Optional
	UseSmartSanitization *bool `json:"useSmartSanitization,omitempty" tf:"use_smart_sanitization,omitempty"`
}

// StackSpec defines the desired state of Stack
type StackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StackInitParameters `json:"initProvider,omitempty"`
}

// StackStatus defines the observed state of Stack.
type StackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Stack is the Schema for the Stacks API. spacelift_stack combines source code and configuration to create a runtime environment where resources are managed. In this way it's similar to a stack in AWS CloudFormation, or a project on generic CI/CD platforms.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spacelift}
type Stack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.branch) || (has(self.initProvider) && has(self.initProvider.branch))",message="spec.forProvider.branch is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repository) || (has(self.initProvider) && has(self.initProvider.repository))",message="spec.forProvider.repository is a required parameter"
	Spec   StackSpec   `json:"spec"`
	Status StackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackList contains a list of Stacks
type StackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stack `json:"items"`
}

// Repository type metadata.
var (
	Stack_Kind             = "Stack"
	Stack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Stack_Kind}.String()
	Stack_KindAPIVersion   = Stack_Kind + "." + CRDGroupVersion.String()
	Stack_GroupVersionKind = CRDGroupVersion.WithKind(Stack_Kind)
)

func init() {
	SchemeBuilder.Register(&Stack{}, &StackList{})
}
