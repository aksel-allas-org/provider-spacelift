//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsInitParameters) DeepCopyInto(out *AzureDevopsInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsInitParameters.
func (in *AzureDevopsInitParameters) DeepCopy() *AzureDevopsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsObservation) DeepCopyInto(out *AzureDevopsObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsObservation.
func (in *AzureDevopsObservation) DeepCopy() *AzureDevopsObservation {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsParameters) DeepCopyInto(out *AzureDevopsParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsParameters.
func (in *AzureDevopsParameters) DeepCopy() *AzureDevopsParameters {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudInitParameters) DeepCopyInto(out *BitbucketCloudInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudInitParameters.
func (in *BitbucketCloudInitParameters) DeepCopy() *BitbucketCloudInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudObservation) DeepCopyInto(out *BitbucketCloudObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudObservation.
func (in *BitbucketCloudObservation) DeepCopy() *BitbucketCloudObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudParameters) DeepCopyInto(out *BitbucketCloudParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudParameters.
func (in *BitbucketCloudParameters) DeepCopy() *BitbucketCloudParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDatacenterInitParameters) DeepCopyInto(out *BitbucketDatacenterInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDatacenterInitParameters.
func (in *BitbucketDatacenterInitParameters) DeepCopy() *BitbucketDatacenterInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDatacenterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDatacenterObservation) DeepCopyInto(out *BitbucketDatacenterObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDatacenterObservation.
func (in *BitbucketDatacenterObservation) DeepCopy() *BitbucketDatacenterObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketDatacenterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDatacenterParameters) DeepCopyInto(out *BitbucketDatacenterParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDatacenterParameters.
func (in *BitbucketDatacenterParameters) DeepCopy() *BitbucketDatacenterParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDatacenterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseInitParameters) DeepCopyInto(out *GithubEnterpriseInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseInitParameters.
func (in *GithubEnterpriseInitParameters) DeepCopy() *GithubEnterpriseInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseObservation) DeepCopyInto(out *GithubEnterpriseObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseObservation.
func (in *GithubEnterpriseObservation) DeepCopy() *GithubEnterpriseObservation {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseParameters) DeepCopyInto(out *GithubEnterpriseParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseParameters.
func (in *GithubEnterpriseParameters) DeepCopy() *GithubEnterpriseParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabInitParameters) DeepCopyInto(out *GitlabInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabInitParameters.
func (in *GitlabInitParameters) DeepCopy() *GitlabInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabObservation) DeepCopyInto(out *GitlabObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabObservation.
func (in *GitlabObservation) DeepCopy() *GitlabObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabParameters) DeepCopyInto(out *GitlabParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabParameters.
func (in *GitlabParameters) DeepCopy() *GitlabParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Module) DeepCopyInto(out *Module) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Module.
func (in *Module) DeepCopy() *Module {
	if in == nil {
		return nil
	}
	out := new(Module)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Module) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModuleInitParameters) DeepCopyInto(out *ModuleInitParameters) {
	*out = *in
	if in.Administrative != nil {
		in, out := &in.Administrative, &out.Administrative
		*out = new(bool)
		**out = **in
	}
	if in.AzureDevops != nil {
		in, out := &in.AzureDevops, &out.AzureDevops
		*out = make([]AzureDevopsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketCloud != nil {
		in, out := &in.BitbucketCloud, &out.BitbucketCloud
		*out = make([]BitbucketCloudInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketDatacenter != nil {
		in, out := &in.BitbucketDatacenter, &out.BitbucketDatacenter
		*out = make([]BitbucketDatacenterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableLocalPreview != nil {
		in, out := &in.EnableLocalPreview, &out.EnableLocalPreview
		*out = new(bool)
		**out = **in
	}
	if in.GithubEnterprise != nil {
		in, out := &in.GithubEnterprise, &out.GithubEnterprise
		*out = make([]GithubEnterpriseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Gitlab != nil {
		in, out := &in.Gitlab, &out.Gitlab
		*out = make([]GitlabInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectRoot != nil {
		in, out := &in.ProjectRoot, &out.ProjectRoot
		*out = new(string)
		**out = **in
	}
	if in.ProtectFromDeletion != nil {
		in, out := &in.ProtectFromDeletion, &out.ProtectFromDeletion
		*out = new(bool)
		**out = **in
	}
	if in.Public != nil {
		in, out := &in.Public, &out.Public
		*out = new(bool)
		**out = **in
	}
	if in.RawGit != nil {
		in, out := &in.RawGit, &out.RawGit
		*out = make([]RawGitInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.SharedAccounts != nil {
		in, out := &in.SharedAccounts, &out.SharedAccounts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpaceID != nil {
		in, out := &in.SpaceID, &out.SpaceID
		*out = new(string)
		**out = **in
	}
	if in.SpaceIDRef != nil {
		in, out := &in.SpaceIDRef, &out.SpaceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SpaceIDSelector != nil {
		in, out := &in.SpaceIDSelector, &out.SpaceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TerraformProvider != nil {
		in, out := &in.TerraformProvider, &out.TerraformProvider
		*out = new(string)
		**out = **in
	}
	if in.WorkerPoolID != nil {
		in, out := &in.WorkerPoolID, &out.WorkerPoolID
		*out = new(string)
		**out = **in
	}
	if in.WorkflowTool != nil {
		in, out := &in.WorkflowTool, &out.WorkflowTool
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModuleInitParameters.
func (in *ModuleInitParameters) DeepCopy() *ModuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(ModuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModuleList) DeepCopyInto(out *ModuleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Module, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModuleList.
func (in *ModuleList) DeepCopy() *ModuleList {
	if in == nil {
		return nil
	}
	out := new(ModuleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ModuleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModuleObservation) DeepCopyInto(out *ModuleObservation) {
	*out = *in
	if in.Administrative != nil {
		in, out := &in.Administrative, &out.Administrative
		*out = new(bool)
		**out = **in
	}
	if in.AwsAssumeRolePolicyStatement != nil {
		in, out := &in.AwsAssumeRolePolicyStatement, &out.AwsAssumeRolePolicyStatement
		*out = new(string)
		**out = **in
	}
	if in.AzureDevops != nil {
		in, out := &in.AzureDevops, &out.AzureDevops
		*out = make([]AzureDevopsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketCloud != nil {
		in, out := &in.BitbucketCloud, &out.BitbucketCloud
		*out = make([]BitbucketCloudObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketDatacenter != nil {
		in, out := &in.BitbucketDatacenter, &out.BitbucketDatacenter
		*out = make([]BitbucketDatacenterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableLocalPreview != nil {
		in, out := &in.EnableLocalPreview, &out.EnableLocalPreview
		*out = new(bool)
		**out = **in
	}
	if in.GithubEnterprise != nil {
		in, out := &in.GithubEnterprise, &out.GithubEnterprise
		*out = make([]GithubEnterpriseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Gitlab != nil {
		in, out := &in.Gitlab, &out.Gitlab
		*out = make([]GitlabObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectRoot != nil {
		in, out := &in.ProjectRoot, &out.ProjectRoot
		*out = new(string)
		**out = **in
	}
	if in.ProtectFromDeletion != nil {
		in, out := &in.ProtectFromDeletion, &out.ProtectFromDeletion
		*out = new(bool)
		**out = **in
	}
	if in.Public != nil {
		in, out := &in.Public, &out.Public
		*out = new(bool)
		**out = **in
	}
	if in.RawGit != nil {
		in, out := &in.RawGit, &out.RawGit
		*out = make([]RawGitObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.SharedAccounts != nil {
		in, out := &in.SharedAccounts, &out.SharedAccounts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpaceID != nil {
		in, out := &in.SpaceID, &out.SpaceID
		*out = new(string)
		**out = **in
	}
	if in.TerraformProvider != nil {
		in, out := &in.TerraformProvider, &out.TerraformProvider
		*out = new(string)
		**out = **in
	}
	if in.WorkerPoolID != nil {
		in, out := &in.WorkerPoolID, &out.WorkerPoolID
		*out = new(string)
		**out = **in
	}
	if in.WorkflowTool != nil {
		in, out := &in.WorkflowTool, &out.WorkflowTool
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModuleObservation.
func (in *ModuleObservation) DeepCopy() *ModuleObservation {
	if in == nil {
		return nil
	}
	out := new(ModuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModuleParameters) DeepCopyInto(out *ModuleParameters) {
	*out = *in
	if in.Administrative != nil {
		in, out := &in.Administrative, &out.Administrative
		*out = new(bool)
		**out = **in
	}
	if in.AzureDevops != nil {
		in, out := &in.AzureDevops, &out.AzureDevops
		*out = make([]AzureDevopsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketCloud != nil {
		in, out := &in.BitbucketCloud, &out.BitbucketCloud
		*out = make([]BitbucketCloudParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketDatacenter != nil {
		in, out := &in.BitbucketDatacenter, &out.BitbucketDatacenter
		*out = make([]BitbucketDatacenterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableLocalPreview != nil {
		in, out := &in.EnableLocalPreview, &out.EnableLocalPreview
		*out = new(bool)
		**out = **in
	}
	if in.GithubEnterprise != nil {
		in, out := &in.GithubEnterprise, &out.GithubEnterprise
		*out = make([]GithubEnterpriseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Gitlab != nil {
		in, out := &in.Gitlab, &out.Gitlab
		*out = make([]GitlabParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectRoot != nil {
		in, out := &in.ProjectRoot, &out.ProjectRoot
		*out = new(string)
		**out = **in
	}
	if in.ProtectFromDeletion != nil {
		in, out := &in.ProtectFromDeletion, &out.ProtectFromDeletion
		*out = new(bool)
		**out = **in
	}
	if in.Public != nil {
		in, out := &in.Public, &out.Public
		*out = new(bool)
		**out = **in
	}
	if in.RawGit != nil {
		in, out := &in.RawGit, &out.RawGit
		*out = make([]RawGitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.SharedAccounts != nil {
		in, out := &in.SharedAccounts, &out.SharedAccounts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpaceID != nil {
		in, out := &in.SpaceID, &out.SpaceID
		*out = new(string)
		**out = **in
	}
	if in.SpaceIDRef != nil {
		in, out := &in.SpaceIDRef, &out.SpaceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SpaceIDSelector != nil {
		in, out := &in.SpaceIDSelector, &out.SpaceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TerraformProvider != nil {
		in, out := &in.TerraformProvider, &out.TerraformProvider
		*out = new(string)
		**out = **in
	}
	if in.WorkerPoolID != nil {
		in, out := &in.WorkerPoolID, &out.WorkerPoolID
		*out = new(string)
		**out = **in
	}
	if in.WorkflowTool != nil {
		in, out := &in.WorkflowTool, &out.WorkflowTool
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModuleParameters.
func (in *ModuleParameters) DeepCopy() *ModuleParameters {
	if in == nil {
		return nil
	}
	out := new(ModuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModuleSpec) DeepCopyInto(out *ModuleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModuleSpec.
func (in *ModuleSpec) DeepCopy() *ModuleSpec {
	if in == nil {
		return nil
	}
	out := new(ModuleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModuleStatus) DeepCopyInto(out *ModuleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModuleStatus.
func (in *ModuleStatus) DeepCopy() *ModuleStatus {
	if in == nil {
		return nil
	}
	out := new(ModuleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawGitInitParameters) DeepCopyInto(out *RawGitInitParameters) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawGitInitParameters.
func (in *RawGitInitParameters) DeepCopy() *RawGitInitParameters {
	if in == nil {
		return nil
	}
	out := new(RawGitInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawGitObservation) DeepCopyInto(out *RawGitObservation) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawGitObservation.
func (in *RawGitObservation) DeepCopy() *RawGitObservation {
	if in == nil {
		return nil
	}
	out := new(RawGitObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawGitParameters) DeepCopyInto(out *RawGitParameters) {
	*out = *in
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawGitParameters.
func (in *RawGitParameters) DeepCopy() *RawGitParameters {
	if in == nil {
		return nil
	}
	out := new(RawGitParameters)
	in.DeepCopyInto(out)
	return out
}
