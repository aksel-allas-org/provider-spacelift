// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContextInitParameters struct {

	// apply scripts
	// List of after-apply scripts
	AfterApply []*string `json:"afterApply,omitempty" tf:"after_apply,omitempty"`

	// destroy scripts
	// List of after-destroy scripts
	AfterDestroy []*string `json:"afterDestroy,omitempty" tf:"after_destroy,omitempty"`

	// init scripts
	// List of after-init scripts
	AfterInit []*string `json:"afterInit,omitempty" tf:"after_init,omitempty"`

	// perform scripts
	// List of after-perform scripts
	AfterPerform []*string `json:"afterPerform,omitempty" tf:"after_perform,omitempty"`

	// plan scripts
	// List of after-plan scripts
	AfterPlan []*string `json:"afterPlan,omitempty" tf:"after_plan,omitempty"`

	// run scripts
	// List of after-run scripts
	AfterRun []*string `json:"afterRun,omitempty" tf:"after_run,omitempty"`

	// apply scripts
	// List of before-apply scripts
	BeforeApply []*string `json:"beforeApply,omitempty" tf:"before_apply,omitempty"`

	// destroy scripts
	// List of before-destroy scripts
	BeforeDestroy []*string `json:"beforeDestroy,omitempty" tf:"before_destroy,omitempty"`

	// init scripts
	// List of before-init scripts
	BeforeInit []*string `json:"beforeInit,omitempty" tf:"before_init,omitempty"`

	// perform scripts
	// List of before-perform scripts
	BeforePerform []*string `json:"beforePerform,omitempty" tf:"before_perform,omitempty"`

	// plan scripts
	// List of before-plan scripts
	BeforePlan []*string `json:"beforePlan,omitempty" tf:"before_plan,omitempty"`

	// form context description for users
	// Free-form context description for users
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// label-name>
	// The labels of the context. To leverage the `autoattach` magic label, ensure your label follows the naming convention: `autoattach:<your-label-name>`
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// should be unique in one account
	// Name of the context - should be unique in one account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID (slug) of the space the context is in
	// ID (slug) of the space the context is in
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-upjet-spacelift/apis/space/v1alpha1.Space
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`
}

type ContextObservation struct {

	// apply scripts
	// List of after-apply scripts
	AfterApply []*string `json:"afterApply,omitempty" tf:"after_apply,omitempty"`

	// destroy scripts
	// List of after-destroy scripts
	AfterDestroy []*string `json:"afterDestroy,omitempty" tf:"after_destroy,omitempty"`

	// init scripts
	// List of after-init scripts
	AfterInit []*string `json:"afterInit,omitempty" tf:"after_init,omitempty"`

	// perform scripts
	// List of after-perform scripts
	AfterPerform []*string `json:"afterPerform,omitempty" tf:"after_perform,omitempty"`

	// plan scripts
	// List of after-plan scripts
	AfterPlan []*string `json:"afterPlan,omitempty" tf:"after_plan,omitempty"`

	// run scripts
	// List of after-run scripts
	AfterRun []*string `json:"afterRun,omitempty" tf:"after_run,omitempty"`

	// apply scripts
	// List of before-apply scripts
	BeforeApply []*string `json:"beforeApply,omitempty" tf:"before_apply,omitempty"`

	// destroy scripts
	// List of before-destroy scripts
	BeforeDestroy []*string `json:"beforeDestroy,omitempty" tf:"before_destroy,omitempty"`

	// init scripts
	// List of before-init scripts
	BeforeInit []*string `json:"beforeInit,omitempty" tf:"before_init,omitempty"`

	// perform scripts
	// List of before-perform scripts
	BeforePerform []*string `json:"beforePerform,omitempty" tf:"before_perform,omitempty"`

	// plan scripts
	// List of before-plan scripts
	BeforePlan []*string `json:"beforePlan,omitempty" tf:"before_plan,omitempty"`

	// form context description for users
	// Free-form context description for users
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// label-name>
	// The labels of the context. To leverage the `autoattach` magic label, ensure your label follows the naming convention: `autoattach:<your-label-name>`
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// should be unique in one account
	// Name of the context - should be unique in one account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID (slug) of the space the context is in
	// ID (slug) of the space the context is in
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`
}

type ContextParameters struct {

	// apply scripts
	// List of after-apply scripts
	// +kubebuilder:validation:Optional
	AfterApply []*string `json:"afterApply,omitempty" tf:"after_apply,omitempty"`

	// destroy scripts
	// List of after-destroy scripts
	// +kubebuilder:validation:Optional
	AfterDestroy []*string `json:"afterDestroy,omitempty" tf:"after_destroy,omitempty"`

	// init scripts
	// List of after-init scripts
	// +kubebuilder:validation:Optional
	AfterInit []*string `json:"afterInit,omitempty" tf:"after_init,omitempty"`

	// perform scripts
	// List of after-perform scripts
	// +kubebuilder:validation:Optional
	AfterPerform []*string `json:"afterPerform,omitempty" tf:"after_perform,omitempty"`

	// plan scripts
	// List of after-plan scripts
	// +kubebuilder:validation:Optional
	AfterPlan []*string `json:"afterPlan,omitempty" tf:"after_plan,omitempty"`

	// run scripts
	// List of after-run scripts
	// +kubebuilder:validation:Optional
	AfterRun []*string `json:"afterRun,omitempty" tf:"after_run,omitempty"`

	// apply scripts
	// List of before-apply scripts
	// +kubebuilder:validation:Optional
	BeforeApply []*string `json:"beforeApply,omitempty" tf:"before_apply,omitempty"`

	// destroy scripts
	// List of before-destroy scripts
	// +kubebuilder:validation:Optional
	BeforeDestroy []*string `json:"beforeDestroy,omitempty" tf:"before_destroy,omitempty"`

	// init scripts
	// List of before-init scripts
	// +kubebuilder:validation:Optional
	BeforeInit []*string `json:"beforeInit,omitempty" tf:"before_init,omitempty"`

	// perform scripts
	// List of before-perform scripts
	// +kubebuilder:validation:Optional
	BeforePerform []*string `json:"beforePerform,omitempty" tf:"before_perform,omitempty"`

	// plan scripts
	// List of before-plan scripts
	// +kubebuilder:validation:Optional
	BeforePlan []*string `json:"beforePlan,omitempty" tf:"before_plan,omitempty"`

	// form context description for users
	// Free-form context description for users
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// label-name>
	// The labels of the context. To leverage the `autoattach` magic label, ensure your label follows the naming convention: `autoattach:<your-label-name>`
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// should be unique in one account
	// Name of the context - should be unique in one account
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID (slug) of the space the context is in
	// ID (slug) of the space the context is in
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-upjet-spacelift/apis/space/v1alpha1.Space
	// +kubebuilder:validation:Optional
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`
}

// ContextSpec defines the desired state of Context
type ContextSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContextParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContextInitParameters `json:"initProvider,omitempty"`
}

// ContextStatus defines the observed state of Context.
type ContextStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Context is the Schema for the Contexts API. spacelift_context represents a Spacelift context - a collection of configuration elements (either environment variables or mounted files) that can be administratively attached to multiple stacks (spacelift_stack) or modules (spacelift_module) using a context attachment (spacelift_context_attachment)`
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spacelift}
type Context struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ContextSpec   `json:"spec"`
	Status ContextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContextList contains a list of Contexts
type ContextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Context `json:"items"`
}

// Repository type metadata.
var (
	Context_Kind             = "Context"
	Context_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Context_Kind}.String()
	Context_KindAPIVersion   = Context_Kind + "." + CRDGroupVersion.String()
	Context_GroupVersionKind = CRDGroupVersion.WithKind(Context_Kind)
)

func init() {
	SchemeBuilder.Register(&Context{}, &ContextList{})
}
