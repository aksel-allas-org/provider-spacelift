// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SpaceInitParameters struct {

	// form space description for users
	// free-form space description for users
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) indication whether access to this space inherits read access to entities from the parent space. Defaults to false.
	// indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
	InheritEntities *bool `json:"inheritEntities,omitempty" tf:"inherit_entities,omitempty"`

	// (Set of String) list of labels describing a space
	// list of labels describing a space
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) name of the space
	// name of the space
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) immutable ID (slug) of parent space. Defaults to root.
	// immutable ID (slug) of parent space. Defaults to `root`.
	ParentSpaceID *string `json:"parentSpaceId,omitempty" tf:"parent_space_id,omitempty"`
}

type SpaceObservation struct {

	// form space description for users
	// free-form space description for users
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) indication whether access to this space inherits read access to entities from the parent space. Defaults to false.
	// indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
	InheritEntities *bool `json:"inheritEntities,omitempty" tf:"inherit_entities,omitempty"`

	// (Set of String) list of labels describing a space
	// list of labels describing a space
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) name of the space
	// name of the space
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) immutable ID (slug) of parent space. Defaults to root.
	// immutable ID (slug) of parent space. Defaults to `root`.
	ParentSpaceID *string `json:"parentSpaceId,omitempty" tf:"parent_space_id,omitempty"`
}

type SpaceParameters struct {

	// form space description for users
	// free-form space description for users
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) indication whether access to this space inherits read access to entities from the parent space. Defaults to false.
	// indication whether access to this space inherits read access to entities from the parent space. Defaults to `false`.
	// +kubebuilder:validation:Optional
	InheritEntities *bool `json:"inheritEntities,omitempty" tf:"inherit_entities,omitempty"`

	// (Set of String) list of labels describing a space
	// list of labels describing a space
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) name of the space
	// name of the space
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) immutable ID (slug) of parent space. Defaults to root.
	// immutable ID (slug) of parent space. Defaults to `root`.
	// +kubebuilder:validation:Optional
	ParentSpaceID *string `json:"parentSpaceId,omitempty" tf:"parent_space_id,omitempty"`
}

// SpaceSpec defines the desired state of Space
type SpaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SpaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SpaceInitParameters `json:"initProvider,omitempty"`
}

// SpaceStatus defines the observed state of Space.
type SpaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SpaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Space is the Schema for the Spaces API. spacelift_space represents a Spacelift space - a collection of resources such as stacks, modules, policies, etc. Allows for more granular access control. Can have a parent space. Please note: the spacelift_space resource requires root Admin permissions, and can only be used by administrative stacks in the root space, or using an API key or user session that has root space access.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,spacelift}
type Space struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SpaceSpec   `json:"spec"`
	Status SpaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpaceList contains a list of Spaces
type SpaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Space `json:"items"`
}

// Repository type metadata.
var (
	Space_Kind             = "Space"
	Space_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Space_Kind}.String()
	Space_KindAPIVersion   = Space_Kind + "." + CRDGroupVersion.String()
	Space_GroupVersionKind = CRDGroupVersion.WithKind(Space_Kind)
)

func init() {
	SchemeBuilder.Register(&Space{}, &SpaceList{})
}
